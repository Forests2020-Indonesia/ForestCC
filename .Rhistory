baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseLasFolder <- paste0(baseOutFolder, "LAS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseLasFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
# listFiles <- list.files(listInpFolder[i], full.names = TRUE)
# sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
closeAllConnections()
sink.number()
sink("/DATA/test.txt")
sink.number()
xx <- sink.number()
xx
class(xx)
ls()
gc()
gc()
sink.number()
closeAllConnections()
preprocess <- function(chunk)
{
# read chunk ----
las <- readLAS(chunk)
if(is.empty(las))
{
print(chunk@files)
return(NULL)
}
splitChunkName <- strsplit(chunk@files, "/")
shortChunkName <- splitChunkName[[1]][length(splitChunkName[[1]])]
sinksChunkName <- paste0(dir4Log, "/", gsub(".las", ".txt", shortChunkName))
sink(sinksChunkName, append = TRUE)
# filter duplicates X, Y, Z  ----
las <- lasfilterduplicates(las)
# filter duplicates X and Y ----
# it will retain only the first return
# to know behind this code line, check out lidR's R source at lascheck function
# this issue: https://github.com/Jean-Romain/lidR/issues/39
las <- lasfilter(las, !duplicated(las@data, by=c("X", "Y")))
# remove unclassified points and low points ----
las <- lasfilter(las, !(Classification == 0 | Classification == 7))
# scan angle -15 <= x <= 15
las <- lasfilter(las, ScanAngleRank >= -15, ScanAngleRank <= 15)
close.connection(sinksChunkName)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/PREPROCESSED/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseLasFolder <- paste0(baseOutFolder, "LAS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
library(lidR)
library(raster)
library(dplyr)
library(magrittr)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseLasFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
# listFiles <- list.files(listInpFolder[i], full.names = TRUE)
# sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
seq_len
seq_len(sink.number())
closeAllConnections()
seq_len(sink.number())
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseLasFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
# listFiles <- list.files(listInpFolder[i], full.names = TRUE)
# sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
preprocess <- function(chunk)
{
# read chunk ----
las <- readLAS(chunk)
if(is.empty(las))
{
print(chunk@files)
return(NULL)
}
splitChunkName <- strsplit(chunk@files, "/")
shortChunkName <- splitChunkName[[1]][length(splitChunkName[[1]])]
sinksChunkName <- paste0(dir4Log, "/", gsub(".las", ".txt", shortChunkName))
sink(sinksChunkName, append = TRUE)
# filter duplicates X, Y, Z  ----
las <- lasfilterduplicates(las)
# filter duplicates X and Y ----
# it will retain only the first return
# to know behind this code line, check out lidR's R source at lascheck function
# this issue: https://github.com/Jean-Romain/lidR/issues/39
las <- lasfilter(las, !duplicated(las@data, by=c("X", "Y")))
# remove unclassified points and low points ----
las <- lasfilter(las, !(Classification == 0 | Classification == 7))
# scan angle -15 <= x <= 15
las <- lasfilter(las, ScanAngleRank >= -15, ScanAngleRank <= 15)
sink(NULL)
}
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseLasFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
# listFiles <- list.files(listInpFolder[i], full.names = TRUE)
# sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
gc()
ls()
preprocess <- function(chunk)
{
# read chunk ----
las <- readLAS(chunk)
if(is.empty(las))
{
print(chunk@files)
return(NULL)
}
# splitChunkName <- strsplit(chunk@files, "/")
# shortChunkName <- splitChunkName[[1]][length(splitChunkName[[1]])]
# sinksChunkName <- paste0(dir4Log, "/", gsub(".las", ".txt", shortChunkName))
#
# sink(sinksChunkName, append = TRUE)
# filter duplicates X, Y, Z  ----
las <- lasfilterduplicates(las)
# filter duplicates X and Y ----
# it will retain only the first return
# to know behind this code line, check out lidR's R source at lascheck function
# this issue: https://github.com/Jean-Romain/lidR/issues/39
las <- lasfilter(las, !duplicated(las@data, by=c("X", "Y")))
# remove unclassified points and low points ----
las <- lasfilter(las, !(Classification == 0 | Classification == 7))
# scan angle -15 <= x <= 15
las <- lasfilter(las, ScanAngleRank >= -15, ScanAngleRank <= 15)
# sink(NULL)
# return(las)
}
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseLasFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
# listFiles <- list.files(listInpFolder[i], full.names = TRUE)
# sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
gc()
ls()
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/PREPROCESSED/"
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
preprocess <- function(chunk)
{
# read chunk ----
las <- readLAS(chunk)
if(is.empty(las))
{
print(chunk@files)
return(NULL)
}
# filter duplicates X, Y, Z  ----
las <- lasfilterduplicates(las)
# filter duplicates X and Y ----
# it will retain only the first return
# to know behind this code line, check out lidR's R source at lascheck function
# this issue: https://github.com/Jean-Romain/lidR/issues/39
las <- lasfilter(las, !duplicated(las@data, by=c("X", "Y")))
# remove unclassified points and low points ----
las <- lasfilter(las, !(Classification == 0 | Classification == 7))
# scan angle -15 <= x <= 15
las <- lasfilter(las, ScanAngleRank >= -15, ScanAngleRank <= 15)
# when return number > number of returns, it'd be filtered out
las <- lasfilter(las, ReturnNumber <= NumberOfReturns)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/PREPROCESSED/"
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
# dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseOutFolder, shortLineName)
# if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
}
warnings
warnings()
?return
return(1)
return(NULL)
preprocess <- function(chunk)
{
splitChunkName <- strsplit(chunk@files, "/")
shortChunkName <- splitChunkName[[1]][length(splitChunkName[[1]])]
outputFileName <- paste0(dir4las, "/", shortChunkName)
if(!file.exists(outputFileName)) {
paste0(shortChunkName, " exist!")
return(NULL)
}
# read chunk ----
las <- readLAS(chunk)
if(is.empty(las))
{
print(paste0(chunk@files,":  NULL"))
return(NULL)
}
print(paste0(chunk@files,":  OK"))
# filter duplicates X, Y, Z  ----
las <- lasfilterduplicates(las)
# filter duplicates X and Y ----
# it will retain only the first return
# to know behind this code line, check out lidR's R source at lascheck function
# this issue: https://github.com/Jean-Romain/lidR/issues/39
las <- lasfilter(las, !duplicated(las@data, by=c("X", "Y")))
# remove unclassified points and low points ----
las <- lasfilter(las, !(Classification == 0 | Classification == 7))
# scan angle -15 <= x <= 15
las <- lasfilter(las, ScanAngleRank >= -15, ScanAngleRank <= 15)
# when return number > number of returns, it'd be filtered out
las <- lasfilter(las, ReturnNumber <= NumberOfReturns)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/PREPROCESSED/"
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
# dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseOutFolder, shortLineName)
# if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) {
dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
}
}
gc()
preprocess <- function(chunk)
{
splitChunkName <- strsplit(chunk@files, "/")
shortChunkName <- splitChunkName[[1]][length(splitChunkName[[1]])]
outputFileName <- paste0(dir4Las, "/", shortChunkName)
if(!file.exists(outputFileName)) {
paste0(shortChunkName, " exist!")
return(NULL)
}
# read chunk ----
las <- readLAS(chunk)
if(is.empty(las))
{
print(paste0(chunk@files,":  NULL"))
return(NULL)
}
print(paste0(chunk@files,":  OK"))
# filter duplicates X, Y, Z  ----
las <- lasfilterduplicates(las)
# filter duplicates X and Y ----
# it will retain only the first return
# to know behind this code line, check out lidR's R source at lascheck function
# this issue: https://github.com/Jean-Romain/lidR/issues/39
las <- lasfilter(las, !duplicated(las@data, by=c("X", "Y")))
# remove unclassified points and low points ----
las <- lasfilter(las, !(Classification == 0 | Classification == 7))
# scan angle -15 <= x <= 15
las <- lasfilter(las, ScanAngleRank >= -15, ScanAngleRank <= 15)
# when return number > number of returns, it'd be filtered out
las <- lasfilter(las, ReturnNumber <= NumberOfReturns)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/PREPROCESSED/"
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
# dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseOutFolder, shortLineName)
# if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) {
dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
}
}
dir4Las
!dir.exists(dir4Las)
shortLineName
i
i=1
splitName <- strsplit(listInpFolder[i], "/")
splitName
shortLineName
shortLineName <- splitName[[1]][length(splitName[[1]])]
shortLineName
i=2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
splitName
i=5
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
splitName
splitName
dir4Las
!dir.exists(dir4Las)
# create output folders
# dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseOutFolder, shortLineName)
!dir.exists(dir4Las)
dir4Las
listInpFolder
i=3
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
splitName
# create output folders
# dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseOutFolder, shortLineName)
dir4Las
!dir.exists(dir4Las)
dir.exists(dir4Las)
dir.exists(dir4Las)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
# dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseOutFolder, shortLineName)
# if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) {
dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
}
else
print(paste0(dir4Las, " folder EXIST ! Skip.."))
}
gc()
preprocess <- function(chunk)
{
splitChunkName <- strsplit(chunk@files, "/")
shortChunkName <- splitChunkName[[1]][length(splitChunkName[[1]])]
outputFileName <- paste0(dir4Las, "/", shortChunkName)
if(file.exists(outputFileName)) {
paste0(shortChunkName, " exist!")
return(NULL)
}
# read chunk ----
las <- readLAS(chunk)
if(is.empty(las))
{
print(paste0(chunk@files,":  NULL"))
return(NULL)
}
print(paste0(chunk@files,":  OK"))
# filter duplicates X, Y, Z  ----
las <- lasfilterduplicates(las)
# filter duplicates X and Y ----
# it will retain only the first return
# to know behind this code line, check out lidR's R source at lascheck function
# this issue: https://github.com/Jean-Romain/lidR/issues/39
las <- lasfilter(las, !duplicated(las@data, by=c("X", "Y")))
# remove unclassified points and low points ----
las <- lasfilter(las, !(Classification == 0 | Classification == 7))
# scan angle -15 <= x <= 15
las <- lasfilter(las, ScanAngleRank >= -15, ScanAngleRank <= 15)
# when return number > number of returns, it'd be filtered out
las <- lasfilter(las, ReturnNumber <= NumberOfReturns)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/PREPROCESSED/"
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
# dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseOutFolder, shortLineName)
# if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) {
dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
}
}
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
# dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseOutFolder, shortLineName)
# if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
}
gc()
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
# setting the process paramaters
ctg <- catalog(listInpFolder[i])
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
# dir4Log = paste0(baseLogFolder, shortLineName)
dir4Las = paste0(baseOutFolder, shortLineName)
# if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Las)) dir.create(dir4Las)
opt_output_files(ctg) <- paste0(dir4Las, "/{ORIGINALFILENAME}")
catalog_apply(ctg, preprocess)
}
ls()
elas <- readLAS("/DATA/LIDAR GIZ/LAS/line_9/LINE_9_47.las")
plot(elas)
gc()
elas <- readLAS("/DATA/LIDAR GIZ/LAS/line_9/LINE_9_57.las")
plot(elas)
summary(elas@data$Z)
elas@data %>% dplyr::filter(Z < 0) %>% nrow
elas@data %>% dplyr::filter(Z > 0) %>% nrow
elas <- readLAS("/DATA/LIDAR GIZ/LAS/line_9/LINE_9_56.las")
