las <- readLAS(paste0(pPath, foldpath, "/", fname, ".las"),
filter = "-drop_z_below 0" )
if(is.empty(las)) return(NULL)
writeLines("\n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
unique(las@data$Classification)
table(las@data$Classification)
# height
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
sapply(listFiles, FUN = chkLas)
chkLas = function(fname)
{
spl <- strsplit(fname, "_")
foldpath <- sapply(spl, function(x) paste0(x[1], "_", x[2]))
foldpath <- tolower(base::unique(foldpath))
las <- readLAS(paste0(pPath, foldpath, "/", fname, ".las"),
filter = "-drop_z_below 0" )
if(is.empty(las)) return(NULL)
writeLines("\n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
sapply(listFiles, FUN = chkLas)
# test putting all selected las in one folder and process with cores
library(lidR)
ctg <- catalog("/DATA/LIDAR GIZ/SELECTEDLAS/")
opt_cores(ctg) <- 4
opt_chunk_size(ctg) <- 0
opt_chunk_buffer(ctg) <- 0
ctgCheck <- function(x)
{
las <- readLAS(x)
if(is.empty(las)) return(NULL)
writeLines("\n")
print(las)
lascheck(las)
writeLines("============================== \n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
flgCheck
unlist(flgCheck)
length(flgCheck)
lass <- readLAS("/DATA/LIDAR GAL/L_43208/l_43208_395000_9770000.las")
lass
lass@header
ctgCheck <- function(x)
{
las <- readLAS(x, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n ============================== \n")
cat(x)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=x, breaks=15)
writeLines("\n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
ctgCheck <- function(x)
{
print(str(x))
las <- readLAS(x, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n ============================== \n")
cat(x)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=x, breaks=15)
writeLines("\n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
ctgCheck <- function(x)
{
fname <- strsplit(x@files, "/")[4]
las <- readLAS(x, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n ============================== \n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
strsplit("/DATA/LIDAR GIZ/SELECTEDLAS/LINE_2_37.las", "/")
ctgCheck <- function(x)
{
fname <- strsplit(x@files, "/")[[1]][5]
las <- readLAS(x, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n ============================== \n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
timestamp()
##------ Fri Mar 01 16:03:03 2019 ------##
time()
timestamp()
##------ Fri Mar 01 16:03:38 2019 ------##
options(stringsAsFactors = FALSE)
options(digits = 22)
library(lidR)
library(dplyr)
as_tibble(read.csv("ANCILLARY/Selected LAS South Sumatra.csv"))
listFiles <- read.csv("ANCILLARY/Selected LAS South Sumatra.csv")[,1]
pPath <- "/DATA/LIDAR GIZ/LAS (DSM)/Point Cloud GIZ Buffer 10m/"
chkLas = function(fname)
{
spl <- strsplit(fname, "_")
foldpath <- sapply(spl, function(x) paste0(x[1], "_", x[2]))
foldpath <- tolower(base::unique(foldpath))
las <- readLAS(paste0(pPath, foldpath, "/", fname, ".las"),
filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
sapply(listFiles, FUN = chkLas)
timestamp()
##------ Fri Mar 01 16:04:24 2019 ------##
t1 <- timestamp()
##------ Fri Mar 01 16:04:51 2019 ------##
t2 <- timestamp()
##------ Fri Mar 01 16:04:58 2019 ------##
t2-t1
tims(t2) - time(t1)
time(t2) - time(t1)
t2
class(t2)
install.packages("lubridate")
library(lubridate)
date(t1)
date()
time_length()
?time_length
d1 <- date()
options(stringsAsFactors = FALSE)
options(digits = 22)
library(lidR)
library(dplyr)
as_tibble(read.csv("ANCILLARY/Selected LAS South Sumatra.csv"))
listFiles <- read.csv("ANCILLARY/Selected LAS South Sumatra.csv")[,1]
pPath <- "/DATA/LIDAR GIZ/LAS (DSM)/Point Cloud GIZ Buffer 10m/"
chkLas = function(fname)
{
spl <- strsplit(fname, "_")
foldpath <- sapply(spl, function(x) paste0(x[1], "_", x[2]))
foldpath <- tolower(base::unique(foldpath))
las <- readLAS(paste0(pPath, foldpath, "/", fname, ".las"),
filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
sapply(listFiles, FUN = chkLas)
d2 <- date()
d2 - d1
d2
d1
rm(list=ls())
d1 <- date()
ctg <- catalog("/DATA/LIDAR GIZ/SELECTEDLAS/")
opt_cores(ctg) <- 4
opt_chunk_size(ctg) <- 0
opt_chunk_buffer(ctg) <- 0
ctgCheck <- function(x)
{
fname <- strsplit(x@files, "/")[[1]][5]
las <- readLAS(x, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n ============================== \n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
d2 <- date()
d1
d2
rm(list=ls())
?lasfilterdecimate
?lasfilterduplicates
rm(list=ls())
ctg <- catalog("/DATA/LIDAR GIZ/SELECTEDLAS/")
opt_chunk_buffer(rmu.cat) <- 0
opt_chunk_size(rmu.cat)   <- 0
opt_cores(ctg) <- 6
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
opt_output_files(ctg) <- "PROCESSED_DATA/SEL_PREPROCESS/{ORIGINALFILENAME}"
# define function ----
preprocess <- function(chunk)
{
las <- readLAS(chunk, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
# lasfilterduplicates
las <- lasfilterduplicates(las)
}
newctg = catalog_apply(rmu.cat, preprocess)
newctg = catalog_apply(ctg, preprocess)
rlas:::lasfilterusage()
rm(list=ls())
ctg <- catalog("PROCESSED_DATA/SEL_PREPROCESS/")
opt_cores(ctg) <- 4
opt_chunk_size(ctg) <- 0
opt_chunk_buffer(ctg) <- 0
ctgCheck <- function(x)
{
fname <- strsplit(x@files, "/")[[1]][5]
las <- readLAS(x, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n ============================== \n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
?lasfilter
rm(list=ls())
ctg <- catalog("/DATA/LIDAR GIZ/SELECTEDLAS/")
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
opt_output_files(ctg) <- "PROCESSED_DATA/SEL_PREPROCESS/{ORIGINALFILENAME}"
# define function ----
preprocess <- function(chunk)
{
las <- readLAS(chunk)
if(is.empty(las)) return(NULL)
# lasfilterduplicates
las <- lasfilterduplicates(las)
# drop Z less than zero
las <- lasfilter(las, Z >= 0)
}
newctg = catalog_apply(ctg, preprocess)
gc()
# define function ----
preprocess <- function(chunk)
{
las <- readLAS(chunk)
if(is.empty(las)) return(NULL)
# lasfilterduplicates
las <- lasfilterduplicates(las)
# drop Z less than zero
las <- lasfilter(las, Z >= 0)
}
newctg = catalog_apply(ctg, preprocess)
rm(list=ls())
ctg <- catalog("PROCESSED_DATA/SEL_PREPROCESS/")
opt_cores(ctg) <- 4
opt_chunk_size(ctg) <- 0
opt_chunk_buffer(ctg) <- 0
ctgCheck <- function(x)
{
fname <- strsplit(x@files, "/")[[1]][5]
las <- readLAS(x, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n ============================== \n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
savehistory()
?grid_terrain
library(lidR)
?grid_terrain
?grid_canopy
rm(list=ls())
ctg <- catalog("PROCESSED_DATA/SEL_PREPROCESS/")
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
las <- readLAS("PROCESSED_DATA/SEL_PREPROCESS/LINE_2_37.las")
las
rlas:::lasfilterusage()
?lasfilter
stdmetrics_z()
?stdmetrics_z
las
lasmetrics(las, mean(Z))
lasmetrics(las, zmean)
?zmean
lasmetrics(las, .stdmetrics_z)
las <- readLAS("PROCESSED_DATA/SEL_PREPROCESS/LINE_8_1.las")
plot(las)
las
las <- readLAS("PROCESSED_DATA/SEL_PREPROCESS/LINE_4_86.las")
las
plot(las)
las <- readLAS("PROCESSED_DATA/SEL_PREPROCESS/LINE_7_2.las")
la
las
plot(las)
las <- readLAS("PROCESSED_DATA/SEL_PREPROCESS/LINE_2_70.las")
las
plot(las)
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST/")
plot(ctg)
rm(list=ls())
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST/")
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
opt_filter(ctg) <- "-drop_z_below 0"
opt_output_files(ctg) <- paste0("PROCESSED_DATA/SEL_DTM/{ORIGINALFILENAME}")
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(50L))
opt_chunk_buffer(ctg) <- 50
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(50L))
gc()
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST/")
opt_chunk_buffer(ctg) <- 50
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
opt_filter(ctg) <- "-drop_z_below 0"
opt_output_files(ctg) <- paste0("PROCESSED_DATA/SEL_DTM/{ORIGINALFILENAME}")
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(50L))
})
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(10L))
})
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST_SINGLE/")
rm(list=ls())
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST_SINGLE/")
ctg <- catalog("PROCESSED_DATA/CTG_SINGLE/")
opt_chunk_buffer(ctg) <- 50
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
opt_filter(ctg) <- "-drop_z_below 0"
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(10L))
})
ctg <- catalog("PROCESSED_DATA/CTG_SINGLE/")
opt_chunk_buffer(ctg) <- 50
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
opt_filter(ctg) <- "-drop_z_below 0"
opt_cores(ctg) <- 1
opt_filter(ctg) <- "-drop_z_below 0"
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(10L))
})
# a copy from RMULiDAR project's code
library(lidR)
rm(list=ls())
ctg <- catalog("/DATA/LIDAR GIZ/SELECTEDLAS/")
las <-
ctg <- catalog("PROCESSED_DATA/CTG_SINGLE/")
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 1
opt_chunk_buffer(ctg) <- 50
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 1
opt_filter(ctg) <- "-drop_z_below 0"
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(10L))
})
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = tin())
})
?kriging
Sys.time()
d1 <- Sys.time()
d2 <- Sys.time()
d2-d1
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
d1 <- Sys.time()
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging())
d2 <- Sys.time()
d2-d1
d1 <- Sys.time()
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging())
d2 <- Sys.time()
d2-d1
cat(d1 <- Sys.time())
d1 <- Sys.time()
cat(d1)
print(d1)
