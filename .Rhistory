lstEVIs[[1]]
lstEVIs[[1]][[1]]
lstEVIs[[1]][[2]]
sapply(lstEVIs, function(x) {print(class(x))})
cvtMODISval <- function(x) {
print(x[[1]])
}
sapply(lstEVIs, function(x) cvtMODISval(x))
lstEVIs <- list(evifiles)
sapply(lstEVIs, function(x) cvtMODISval(x))
cvtMODISval <- function(x) {
print(x)
}
sapply(lstEVIs, function(x) cvtMODISval(x))
lstEVIs[[1:3]]
lstEVIs[1:3]
lstEVIs[[1:3]
]
test <- sapply(lstEVIS, "[", c(1:3))
test <- sapply(lstEVIs, "[", c(1:3))
sapply(test, function(x) cvtMODISval(x))
cvtMODISval <- function(x) {
x
}
sapply(test, function(x) cvtMODISval(x))
cvtMODISval <- function(x) {
raster(x)
}
sapply(test, function(x) cvtMODISval(x))
?gsub
cvtMODISval <- function(x) {
r <- raster(x)
r <- calc(r, fun = function(x) x * 0.0001)
fname <- gsub(x = x, pattern = "EVIMASKED",
replacement = "EVIMASKEDVALUECONVERTED")
print(fname)
writeRaster(r, filename = fname, overwrite = TRUE)
}
cvtMODISval <- function(x) {
r <- raster(x)
r <- calc(r, fun = function(x) x * 0.0001)
fname <- gsub(x = x, pattern = "EVIMASKED",
replacement = "EVIMASKEDVALUECONVERTED")
writeRaster(r, filename = fname, overwrite = TRUE)
}
cvtMODISval <- function(x) {
r <- raster(x)
r <- calc(r, fun = function(x) x * 0.0001)
fname <- gsub(x = x, pattern = "EVIMASKED",
replacement = "EVIMASKEDVALUECONVERTED")
writeRaster(r, filename = fname, overwrite = TRUE)
}
sapply(lstEVIs, function(x) cvtMODISval(x))
warnings
warnings()
evifiles
sapply(evifiles, FUN = function(x) {
fname <- gsub(pattern = "EVIMASKED",
replacement = "EVIMASKEDVALUECONVERTED",
names(x))
print(fname)
}
)
sapply(evifiles, FUN = function(x) {
fname <- gsub(pattern = "EVIMASKED",
replacement = "EVIMASKEDVALUECONVERTED",
x)
print(fname)
}
)
sapply(evifiles, FUN = function(x) {
r <- raster(x)
r <- calc(r, fun = function(x) x * 0.0001)
fname <- gsub(pattern = "EVIMASKED", replacement = "EVIMASKEDVALUECONVERTED", x)
print(fname)
writeRaster(r, filename = fname, overwrite = TRUE)
}
)
evifiles <- list.files("/DATA/MOD13Q120102018/EVIMASKEDVALUECONVERTED/", full.names = TRUE)
EVIs <- lapply(evifiles, FUN = function(x) raster(x))
# load pts
aoipts <- read_sf("/DATA/LIDAR GIZ/AOIGRID_MODIS_SINUS/all_line_sinus_modis_vgrid_pts.shp")
aoipts <- as(aoipts, "Spatial")
class(aoipts)# extract
?raster::extract
xtrpts <- raster::extract(EVIs, aoipts, sp = TRUE)
aoipts
names(aoipts)
xtrpts <- raster::extract(EVIs, aoipts, sp = TRUE)
aoipts
EVIs
rasterOptions(maxmemory = 1.0e+10)
options(stringsAsFactors = FALSE)
options(digits = 22)
library(lidR)
library(dplyr)
library(magrittr)
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
if(!file.exists(fname)) return(NULL)
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
print(listInpFolder[1])
print(listInpFolder[1], "asdfad")
print(paste0(listInpFolder[1], "asdfad"))
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
if(!file.exists(fname)) {
print(paste("File: ", shortFileName, "exist!"))
return(NULL)
}
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
if(file.exists(fname)) {
print(paste("File: ", shortFileName, "exist!"))
return(NULL)
}
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
if(file.exists(fname)) {
print(paste("File: ", shortFileName, "exist!"))
return(1)
}
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
print(fname)
if(file.exists(fname)) {
print(paste("File: ", shortFileName, "exist!"))
return(1)
}
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
listInpFolder
gc()
options(stringsAsFactors = FALSE)
options(digits = 22)
library(lidR)
library(dplyr)
library(magrittr)
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
print(fname)
if(file.exists(fname)) {
print(paste("File: ", shortFileName, "exist!"))
return(1)
}
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
listInpFolder
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
source('C:/FORESTS2020/CODES/ForestCC/R-OLD/sel_metrics.R', echo=TRUE)
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
print(fname)
if(file.exists(sinkFileName)) {
print(paste("File log of: ", fname, "exist!"))
return(NULL)
}
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
gc()
listInpFolder
gc()
ls()
