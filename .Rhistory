600430-600186
600430-600192
600430-600180
9314482-9314323
250/3
30*210
30*1
30*80
9314322-100
9314482-9314222
9314482-9314322
9314482-9314222
9314482-9314232
library(lidR)
library(dplyr)
library(magrittr)
l <- readLAS("/DATA/LiDAR CIDANAU BANTEN/07. POINT CLOUD/AREA_3_ALL_CLASS.las")
lassample <- lasclipRectangle(l, xleft = 600180, ybottom = 9314232,
xright = 600430, ytop = 9314482)
writeLAS(lassample, "EXAMPLE_DATA/lassample.laz")
xx<-readLAS("EXAMPLE_DATA/lassample.laz")
lassample <- lasfilter(lassample, ReturnNumber <= NumberOfReturn)
lassample <- lasfilter(lassample, ReturnNumber <= NumberOfReturns)
writeLAS(lassample, "EXAMPLE_DATA/lassample.laz")
nrow(lassample@data)
nrow(l@data)
lassample <- lasclipRectangle(l, xleft = 600180, ybottom = 9314232,
xright = 600430, ytop = 9314482)
lassample <- nrow(lasfilter(lassample, ReturnNumber <= NumberOfReturns)@data)
ls()
lassample <- lasfilter(lassample, ReturnNumber <= NumberOfReturns)
lassample <- lasclipRectangle(l, xleft = 600180, ybottom = 9314232,
xright = 600430, ytop = 9314482)
lassample <- lasfilter(lassample, ReturnNumber <= NumberOfReturns)
nrow(lassample@data)
writeLAS(lassample, "EXAMPLE_DATA/lassample.laz")
lassample <- lasclipRectangle(l, xleft = 600180, ybottom = 9314232,
xright = 600430, ytop = 9314482)
nrow(lassample@data)
lassample <- lasfilter(lassample, ReturnNumber <= NumberOfReturns)
nrow(lassample@data)
nrow(l@data)
writeLAS(lassample, "EXAMPLE_DATA/lassample.laz")
# load the data ----
l <- readLAS("EXAMPLE_DATA/lassample.laz")
plot(l)
# normalize ----
dtm <- grid_terrain(las, res=0.5, method="kriging")
rm(l)
# load the data ----
las <- readLAS("EXAMPLE_DATA/lassample.laz")
# normalize ----
dtm <- grid_terrain(las, res=0.5, method="kriging")
lasnormalize(las, dtm)
plot(las)
las
lasthin <- lasfilterdecimate(lassample, density=15, res=1)
lasthin
writeLAS(lasthin, "EXAMPLE_DATA/lassample.laz")
# load the data ----
las <- readLAS("EXAMPLE_DATA/lassample.laz")
# normalize ----
dtm <- grid_terrain(las, res=0.5, method="kriging")
plot(las)
# normalize ----
dtm <- grid_terrain(las, res=0.5, method="kriging")
lasnormalize(las, dtm)
# chm ----
chm <- grid_canopy(las, res = 0.5, subcircle = 0.2, na.fill="knnidw", k=10, p=2)
plot(chm)
unique(las@data$Classification)
unique(lasthin@data$Classification)
table(lasthin@data$Classification)
# LiDAR metric ----
# all return
CCIdx <- function(z, cls)
{
# all point clouds (returns) which classified as vegetation
vg <- (cls >= 3) & (cls <= 5) & (z >= 3)
vg <- sum(vg)
# all return despite of their classification;
# use 'length' function because of z is a vector object
ar <- length(z)
return(list(arci = vg/ar)) # the output must be a "list" object, so it uses 'list' function
}
cc <- grid_metrics(las, func=CCidx(Z, Classification), res=30)
# LiDAR metric ----
# all return
CCIdx <- function(z, cls)
{
# all point clouds (returns) which classified as vegetation
vg <- (cls >= 3) & (cls <= 5) & (z >= 3)
vg <- sum(vg)
# all return despite of their classification;
# use 'length' function because of z is a vector object
ar <- length(z)
return(list(arci = vg/ar)) # the output must be a "list" object, so it uses 'list' function
}
cc <- grid_metrics(las, func=CCidx(Z, Classification), res=30)
cc <- grid_metrics(las, func=CCIdx(Z, Classification), res=30)
cc
# turn CC into sf
cc_sf = cc %>% as.data.frame %>% st_as_sf(coords = c("X","Y"), crs=32748)
library(sf)
# turn CC into sf
cc_sf = cc %>% as.data.frame %>% st_as_sf(coords = c("X","Y"), crs=32748)
st_write(cc_sf, "PROCESSED_DATA/cc_sf.shp", delete_layer = TRUE)
# LiDAR metric ----
# all return
CCIdx <- function(z, cls)
{
# all point clouds (returns) which classified as vegetation
vg <- (cls >= 3) & (cls <= 5) & (z >= 2.5)
vg <- sum(vg)
# all return despite of their classification;
# use 'length' function because of z is a vector object
ar <- length(z)
return(list(arci = vg/ar)) # the output must be a "list" object, so it uses 'list' function
}
cc <- grid_metrics(las, func=CCIdx(Z, Classification), res=30)
cc
# turn CC into sf
cc_sf = cc %>% as.data.frame %>% st_as_sf(coords = c("X","Y"), crs=32748)
st_write(cc_sf, "PROCESSED_DATA/cc_sf.shp", delete_layer = TRUE)
library(lidR)
cat1 <- catalog("/DATA/LIDAR GAL/43043/43043.laz")
?lascheck
lascheck(cat1)
plot(cat1)
as.spatial(cat1)
cat1@input_options
cat1@data$File.Source.ID
cat1@Point.Data.Format.ID
cat1@data
cat1@data$filename
shp <- as.spatial(cat1)
?strsplit
strsplit(cat1@data$filename, "\\\\")
fn <- strsplit(cat1@data$filename, "\\\\")[[5]]
fn <- strsplit(cat1@data$filename, "\\\\")[[4]]
fn <- strsplit(cat1@data$filename, "\\\\")[5]
fn
fn <- strsplit(cat1@data$filename, "\\\\")[[1]][5]
fn
library(sf)
write_sf(shp, paste0("/DATA/LIDAR GAL/43043/", fn, ".shp")
)
st_write(shp, paste0("/DATA/LIDAR GAL/43043/", fn, ".shp"))
class(shp)
paste0("/DATA/LIDAR GAL/43043/", fn, ".shp")
?write_sf
shp %<>% st_as_sf(shp)
libraru(magrittr)
library(magrittr)
shp %<>% st_as_sf(shp)
write_sf(shp, paste0("/DATA/LIDAR GAL/43043/", fn, ".shp"))
cat1 <- catalog("/DATA/LIDAR GAL/43208/43028.laz")
plot(cat1)
shp <- as.spatial(cat1)
strsplit(cat1@data$filename, "\\\\")
fn <- strsplit(cat1@data$filename, "\\\\")[[1]][5]
write_sf(shp, paste0(cat1@data$filename, ".shp"))
cat1@data$filename
shp %<>% st_as_sf(shp)
write_sf(shp, paste0(cat1@data$filename, ".shp"))
ctg <- catalog("/DATA/LIDAR GAL/43308/43038.laz")
plot(ctg)
shp <- as.spatial(ctg)
strsplit(ctg@data$filename, "\\\\")
fn <- strsplit(ctg@data$filename, "\\\\")[[1]][5]
shp %<>% st_as_sf(shp)
write_sf(shp, paste0(ctg@data$filename, ".shp"))
ctg <- catalog("/DATA/LIDAR GAL/46009/46009.laz")
plot(ctg)
shp <- as.spatial(ctg)
strsplit(ctg@data$filename, "\\\\")
fn <- strsplit(ctg@data$filename, "\\\\")[[1]][5]
shp %<>% st_as_sf(shp)
write_sf(shp, paste0(ctg@data$filename, ".shp"))
ctg <- catalog("/DATA/LIDAR GAL/46027/46027.laz")
plot(ctg)
shp <- as.spatial(ctg)
strsplit(ctg@data$filename, "\\\\")
fn <- strsplit(ctg@data$filename, "\\\\")[[1]][5]
shp %<>% st_as_sf(shp)
write_sf(shp, paste0(ctg@data$filename, ".shp"))
ctg <- catalog("/DATA/LIDAR GAL/47035/47035.laz")
plot(ctg)
shp <- as.spatial(ctg)
strsplit(ctg@data$filename, "\\\\")
fn <- strsplit(ctg@data$filename, "\\\\")[[1]][5]
shp %<>% st_as_sf(shp)
write_sf(shp, paste0(ctg@data$filename, ".shp"))
ctg <- catalog("/DATA/LIDAR GAL/43208/43028.laz")
plot(ctg)
galmap <- read_sf("/DATA/TOPO SUMSEL/batas PT GAL-UTM.shp")
plot(st_geometry(galmap), add = TRUE)
plot(st_geometry(galmap))
plot(ctg, add = TRUE)
toupper()
toupper("asdfad")
ls()
ctg
26*6.5
ctg43208 <- catalog("/DATA/LIDAR GAL/Tiles_43208/")
plot(ctg43208)
rm(list=ls())
ctg43208 <- catalog("/DATA/LIDAR GAL/43208/")
opt_chunk_buffer(ctg43208) <- 0
opt_chunk_size(ctg43208)   <- 1000
opt_chunk_alignment(ctg43208) <- c(397000L, 9772000L) # WAJIB INTEGER !
opt_output_files(ctg43208) <- "/DATA/LIDAR GAL/L_43208/l_43208_{XLEFT}_{YBOTTOM}")
opt_output_files(ctg43208) <- "/DATA/LIDAR GAL/L_43208/l_43208_{XLEFT}_{YBOTTOM}"
opt_filter(ctg43208) <- "-drop_z_above 90"  # based on Google Earth DTM
newctg <-catalog_retile(ctg43208)
gc()
opt_cores(ctg43208) <- 4L
newctg <-catalog_retile(ctg43208)
library(lidR)
gc()
ctg
ctg43208
las <- readLAS("/DATA/LIDAR GAL/L_43208/l_43208_411000_9775000.las")
las
plot(las)
lascheck(las)
unique(las@data$Classification)
