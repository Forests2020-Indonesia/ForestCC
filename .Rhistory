training_data <- frci.bands[-sel, ] %>% dplyr::select(-geometry) %>% as.data.frame
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% dplyr::select(-geometry) %>% as.data.frame
validate_data <- frci.bands[sel, ] %>% dplyr::select(-geometry) %>% as.data.frame
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_bands %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
training_data <- frci.bands[-sel, ] %>% dplyr::select(-geometry) %>% as.data.frame
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
class(training_data)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
validate_data <- frci.bands[sel, ] %>% st_drop_geometry()
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_bands %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
?predict
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
validate_data <- frci.bands[sel, ] %>% st_drop_geometry()
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_svr[[fold]] %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
model_rmse
svr_rmse
model_rmse
class(model_bands)
class(model_keras[1]
)
model_keras[[1]]
class(model_keras[[1]])
model_bands
?%<-%
model_rmse
?%<-%
library(magrittr)
?%<-%
library(keras)
?%<-%
%<-%
?Special
?clusterR
install.packages(snow)
install.packages("snow")
beginCluster()
endCluster()
beginCluster()
endCluster()
class(colwise_bands)
?predict
ls()
ls()
model_keras
class(model_keras)
class(model_keras[[1]])
ls()
library(keras)
library(magrittr)
library(dplyr)
library(sf)
library(ggplot2)
library(raster)
library(caret)
rasterOptions(maxmemory = 1.2e+10)
rasterOptions(chunksize = 1e+9)
rm(list=ls())
dataset_frci <- readRDS("PROCESSED_DATA/SET_SAMPLES/dataset_frci.RDS")
Bands <- as.data.frame(dataset_frci) %>%
dplyr::select(b2, b3, b4, b5, b6, b7) %>%
as.matrix %>%
round(3)
FRCI <- as.data.frame(dataset_frci) %>%
dplyr::select(FRCI) %>%
as.matrix() %>%
round(3)
# model development ----
build_model <- function(traindata, actfunc, strmetrics) {
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = actfunc,
input_shape = dim(traindata)[2]) %>%
layer_dense(units = 16, activation = actfunc) %>%
layer_dense(units = 1)
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(),
metrics = list(strmetrics)
)
model
}
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 90 == 0) cat("\n")
cat(".")
}
)
epochs <- 500
model_keras_history <- vector("list", 10)
keras_rmse <- vector("list", 10)
model_keras <- vector("list", 10)
use_session_with_seed(12345, disable_parallel_cpu = FALSE)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
train.Bands <- Bands[-sel, ]
train.FRCI <- FRCI[-sel, ]
valid.Bands <- Bands[sel, ]
valid.FRCI <- FRCI[sel, ]
model_tmp <- build_model(train.Bands, "relu", "mean_squared_error")
model_keras_history[[fold]] <- model_tmp %>%
fit(x = train.Bands,
y = train.FRCI,
batch_size = 173,  # total samples is 3460
epochs = epochs,
validation_data = list(valid.Bands, valid.FRCI),
verbose = 0,
callbacks = list(print_dot_callback))
model_keras[[fold]] <- model_tmp
pred_FRCI <- model_tmp %>% predict(valid.Bands)
keras_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = valid.FRCI)
}
# save model ----
model_keras %>% saveRDS("PROCESSED_DATA/SEL_MODELS/model_bands_20190508.RDS")
model_tmp
tmp_frci <- model_tmp %>% predict(valid.Bands)
tmp_frci
tmp_frci2 <- model_keras[[7]] %>% predict(valid.Bands)
tmp_frci2
tmp_frci2 <- model_keras[[5]] %>% predict(valid.Bands)
tmp_frci2
sel_raster_path = "PROCESSED_DATA/SEL_RASTER"
sel_raster <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = TRUE)
sel_raster
sel_raster0 <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = FALSE)
sel_raster0 <- gsub(".tif", "", sel_raster0)
class(sel_raster)
# list_raster <- lapply(sel_raster, FUN = function(x) raster(x))
list_raster <- lapply(sel_raster, FUN = function(x) brick(x))
rm(list_raster)
# list_raster <- lapply(sel_raster, FUN = function(x) raster(x))
list_brick <- lapply(sel_raster, FUN = function(x) brick(x))
names(list_brick)
list_brick
names(list_brick)
# names(list_raster) <- sel_raster0
names(list_brick) <- sel_raster0
list_brick
sel_raster[1:6]
sel_raster <- sel_raster[1:6]
sel_raster0 <- sel_raster0[1:6]
# list_raster <- lapply(sel_raster, FUN = function(x) raster(x))
list_brick <- lapply(sel_raster, FUN = function(x) brick(x))
# names(list_raster) <- sel_raster0
names(list_brick) <- sel_raster0
list_brick
# mask_raster <- lapply(list_raster, function(x) crop(x, mask_extrapolation))
list_matrix <- lapply(list_brick, function(x) as.matrix(x))
rm(list_matrix)
# mask_raster <- lapply(list_raster, function(x) crop(x, mask_extrapolation))
# list_matrix <- lapply(list_brick, function(x) as.matrix(x))
list_vector <- lapply(list_brick, function(x) x[])
# remove band QA and select certain layers for certain purpose
# list_vector <- list_vector[-7]
# vect_bands  <- list_vector[c("b2", "b3", "b4", "b5", "b6", "b7")]
# colwise_bands <- do.call(cbind, vect_bands)
colwise_bands <- do.call(cbind, list_vector)
keras_rmse
# extrapolate  ----
extrapolate_FRCI <- model_keras[[8]] %>% predict(colwise_bands)
extrapolation_raster <- list_raster[[1]] # copy the raster framework (shell?)
extrapolation_raster <- list_brick[[1]] # copy the raster framework (shell?)
extrapolation_raster[] <- extrapolate_FRCI
writeRaster(extrapolation_raster, "PROCESSED_DATA/RASTER_EVAL/extr_model_fold8_20190508.tif",
overwrite = TRUE)
?predict
frci.bands <- dataset_frci %>% dplyr::select(FRCI, b2, b3, b4, b5, b6, b7)
model_svr <- vector("list", 10)
svr_rmse <- vector("list", 10)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
validate_data <- frci.bands[sel, ] %>% st_drop_geometry()
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_svr[[fold]] %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
svr_rmse
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
extrapolate_frci_svr
class(extrapolate_FRCI)
class(extrapolate_frci_svr)
dim(extrapolate_FRCI)
length(extrapolate_frci_svr)
dim(colwise_bands)
dim(validate_data)
names(validate_data)
model_svr[[8]]
summary(model_svr[[8]])
names(colwise_bands)
class(colwise_bands)
dim(colwise_bands)
colnames(colwise_bands)
head(colwise_bands)
sum(is.na(colwise_bands))
109313545/6
18218924+length(extrapolate_frci_svr)
?predict
?ifelse
head(extrapolate_FRCI)
sum(is.nan(extrapolate_FRCI))
sum(is.numeric(extrapolate_FRCI))
extrapolate_FRCI
tail(extrapolate_FRCI)
plot(extrapolation_raster)
head(colwise_bands)
colwise_bands[is.na(colwise_bands)] <- -9999
beginCLuster()
beginCluster()
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
gc()
rm(extrapolate_frci_frci)
rm(extrapolate_frci_svr)
endCluster()
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
gc()
sel_raster_path = "PROCESSED_DATA/SEL_RASTER"
rm(list=ls())
library(dplyr)
library(e1071)
library(caret)
rasterOptions(maxmemory = 1.2e+10)
rasterOptions(chunksize = 1e+9)
dataset_frci <- readRDS("PROCESSED_DATA/SET_SAMPLES/dataset_frci.RDS")
frci.bands <- dataset_frci %>% dplyr::select(FRCI, b2, b3, b4, b5, b6, b7)
model_svr <- vector("list", 10)
svr_rmse <- vector("list", 10)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
validate_data <- frci.bands[sel, ] %>% st_drop_geometry()
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_svr[[fold]] %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
sel_raster_path = "PROCESSED_DATA/SEL_RASTER"
sel_raster <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = TRUE)
sel_raster0 <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = FALSE)
sel_raster0 <- gsub(".tif", "", sel_raster0)
sel_raster <- sel_raster[1:6]
sel_raster0 <- sel_raster0[1:6]
list_brick <- lapply(sel_raster, FUN = function(x) brick(x))
ist_vector <- lapply(list_brick, function(x) x[])
list_vector <- ist_vector
rm(list_vector)
list_vector <- ist_vector
rm(ist_vector)
colwise_bands <- do.call(cbind, list_vector)
saveRDS(colwise_bands, "PROCESSED_DATA/SEL_RASTER_COMBINED/colwise_bands_with_NA.tif")
# svr can't handle NA, need to adjust dataset
colwise_bands[is.na(colwise_bands)] <- -9999
saveRDS(colwise_bands, "PROCESSED_DATA/SEL_RASTER_COMBINED/colwise_bands_wo_NA.tif")
rm(list_vector)
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
nrow(colwise_bands)
rasterOptions(maxmemory = 1.5e+10)
rasterOptions(chunksize = 1e+9)
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
gc()
library(raster)
rasterOptions(maxmemory = 1.5e+10)
rasterOptions(chunksize = 1e+9)
rm(list=ls())
rasterOptions(maxmemory = 1.5e+10)
rasterOptions(chunksize = 1e+9)
sel_raster_path = "PROCESSED_DATA/SEL_RASTER"
sel_raster <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = TRUE)
sel_raster0 <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = FALSE)
sel_raster0 <- gsub(".tif", "", sel_raster0)
sel_raster <- sel_raster[1:6]
sel_raster0 <- sel_raster0[1:6]
list_brick <- lapply(sel_raster, FUN = function(x) brick(x))
list_vector <- lapply(list_brick, function(x) x[])
colwise_bands <- do.call(cbind, list_vector)
library(dplyr)
library(e1071)
library(caret)
rasterOptions(maxmemory = 1.5e+10)
rasterOptions(chunksize = 1e+9)
dataset_frci <- readRDS("PROCESSED_DATA/SET_SAMPLES/dataset_frci.RDS")
frci.bands <- dataset_frci %>% dplyr::select(FRCI, b2, b3, b4, b5, b6, b7)
model_svr <- vector("list", 10)
svr_rmse <- vector("list", 10)
rm(list=ls())
rasterOptions(maxmemory = 1.5e+10)
rasterOptions(chunksize = 1e+9)
dataset_frci <- readRDS("PROCESSED_DATA/SET_SAMPLES/dataset_frci.RDS")
frci.bands <- dataset_frci %>% dplyr::select(FRCI, b2, b3, b4, b5, b6, b7)
model_svr <- vector("list", 10)
svr_rmse <- vector("list", 10)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
validate_data <- frci.bands[sel, ] %>% st_drop_geometry()
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_svr[[fold]] %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
colwise_bands <- readRDS("PROCESSED_DATA/SEL_RASTER_COMBINED/colwise_bands_wo_NA.tif")
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
gc()
svr1 <- readRDS("PROCESSED_DATA/SEL_MODELS/svr_20190510_test.RDS")
library(caret)
library(e1071)
ls()
bigdf <- matrix(runif(50000000*6), nrow=50000000, ncol=6, byrow=TRUE)
names(bigdf) <- c("b2", "b3", "b4", "b5", "b6", "b7") # optional?
head(bigdf)
test_predict <- svr1 %>% predict(bigdf)
library(magrittr)
test_predict <- svr1 %>% predict(bigdf)
Sys.info()
sessionInfo()
ls()
rm(list=ls())
library(lidR)
library(raster)
library(dplyr)
library(magrittr)
library(sf)
library(ggplot2)
library(rgdal)
sel_metrics = function(z, htree, rn, nr, cls)
{
vg <- (cls >= 3 & cls <= 5) # vegetation
# arci = all return canopy index
ar <- (z >= 0) # semua return
ac =  vg & (z >= htree) # return dari kanopi harus dari vegetasi dengan ketinggian minimal 2.5m (pengalaman field work di RMU)
arci = sum(ac) / sum(ar)
# FRCI = first return canopy index
sr <- (nr == 1) # single return when only 1 beam and 1 return )
fr <- (nr  > 1) & (rn == 1)  # frist return from many return
# frci'a denominator
fc <- fr & vg & (z >= htree)
sc <- sr & vg & (z >= htree)
frci = (sum(sc) + sum(fc)) / (sum(sr) + sum(fr))
# mean intensity from first return only
#mean_ity <- mean(ity)
# print(paste0("FRCI = ", frci))
# return all indexes
return(list(ARCI = arci, FRCI = frci))
}
calc_pos <- function(chunk_name)
{
aoidir <- "/DATA/LIDAR GIZ/AOI/"
vgrdir <- "/FORESTS2020/CODES/ForestCC/ANCILLARY/VGRID/"
split_chunk_name <- strsplit(chunk_name, "/")
fname_las <- split_chunk_name[[1]][length(split_chunk_name[[1]])]
split_fname_las <- strsplit(fname_las, "_")
fn_flightline <- paste0(split_fname_las[[1]][1],
"_",
split_fname_las[[1]][2],
".shp")
fn_vecgrid <- paste0(split_fname_las[[1]][1],
"_",
split_fname_las[[1]][2],
"-vgrid.shp")
tilename <<- gsub(".las", "", fname_las)
# READ THIS !!
# the operator <<- used to create and assign a global variable within a function
# see:  https://stackoverflow.com/questions/10904124/global-and-local-variables-in-r
fl_data <- st_read(paste0(aoidir, fn_flightline)) #
vg_data <- st_read(paste0(vgrdir, fn_vecgrid))
sel_tile <- fl_data %>% filter(TxtMemo == tilename) # select which tile
sel_grid <<- vg_data[sel_tile, op=st_within] # select the grid within sel_tile boundary
sel_grid$gridID <<- 1:nrow(sel_grid) # add ID for selection
grid01 = sel_grid %>% filter(gridID == 1) # select the first grid
pos <- raster::extent(grid01)
return(pos)
}
# read las
lasfname <-"/DATA/LIDAR GIZ/LAS (DSM)/PINDAHDATA/STAGE3/LINE_2_82.las"
line2.82 <- readLAS(lasfname)
lascheck(line2.82)
# filter duplicates
lasf <- lasfilterduplicates(line2.82)
lascheck(lasf)
# normalization
## dtm creation
dtm <- grid_terrain(lasf, res=0.5, algorithm = kriging(k=10L))
saveRDS(dtm, "PROCESSED_DATA/LINE_2_82/dtm.rds")
## normalize
ndsm <- lasnormalize(lasf, dtm)
saveRDS(ndsm, "PROCESSED_DATA/LINE_2_82/nDSM.rds")
saveRDS(lasf, "PROCESSED_DATA/LINE_2_82/lasf.rds")
# filter for narrow scan angle
narrowsca <- lasfilter(ndsm, ScanAngleRank >= -15, ScanAngleRank <= 15)
narrowsca <- lasfilter(narrowsca, Z >= 0)
coords <- calc_pos(lasfname)
saveRDS(narrowsca, "PROCESSED_DATA/LINE_2_82/narrowscan.rds")
resolution=30
mtr.nar <- grid_metrics(narrowsca,
sel_metrics(Z, htree=2.5, ReturnNumber, NumberOfReturns, Classification),
res=resolution,
start=c(coords[1], coords[3]))
names(mtr.nar) <- c("naARCI", "naFRCI", "naITY")
names(mtr.nar)
names(mtr.nar) <- c("naARCI", "naFRCI")
mtr.ori <- grid_metrics(ndsm,
sel_metrics(Z, htree=2.5, ReturnNumber, NumberOfReturns, Classification),
res=resolution,
start=c(coords[1], coords[3]))
mtr.sub <- mtr.nar$naFRCI - mtr.ori$FRCI
# center grid
centergrd <- st_centroid(sel_grid)
spgrd <- as(centergrd, "Spatial")
# stacking FRCI only
mtr.sta <- stack(mtr.nar$naFRCI, mtr.ori$FRCI)
# stacking ARCI only
mtr.arci <- stack(mtr.nar$naARCI, mtr.ori$ARCI)
# stacking ARCI dan FRCI
arci.frci <- stack(mtr.nar$naARCI, mtr.nar$naFRCI)
df.acci <- as.data.frame(arci.frci)
saveRDS(mtr.nar, "PROCESSED_DATA/LINE_2_82/CCindex_narrow_scanangle.rds")
saveRDS(mtr.ori, "PROCESSED_DATA/LINE_2_82/CCindex_ori_scanangle.rds")
# stacking FRCI only and save
mtr.sta <- stack(mtr.nar$naFRCI, mtr.ori$FRCI)
# stacking ARCI only
mtr.arci <- stack(mtr.nar$naARCI, mtr.ori$ARCI)
# ARCI vs FRCI
mtr.acci <- raster::extract(arci.frci, spgrd, sp = TRUE)
mtr.acci$diff <- mtr.acci$naARCI - mtr.acci$naFRCI
# raster based CC index ----
r_ndsm <- grid_canopy(ndsm, res = 0.5,
p2r(subcircle = 0.2, na.fill = kriging() ))
plot(r_ndsm)
r_ndsm
plot(r_ndsm, col = height.colors(40))
writeRaster(r_ndsm, "PROCESSED_DATA/LINE_2_82/raster_ndsm.tif",
overwrite = TRUE)
?p2r
# by
r_pfr <- grid_canopy(ndsm, res = 0.5, pitfree(c(0,2,5,10,15,20), c(0, 1.5)))
saveRDS(r_ndsm, "PROCESSED_DATA/LINE_2_82/raster_chm_p2r.rds")
writeRaster(r_ndsm, "PROCESSED_DATA/LINE_2_82/raster_chm_p2r.tif",
overwrite = TRUE)
saveRDS(r_pfr, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free.rds")
writeRaster(r_pfr, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free.tif",
overwrite = TRUE)
plot(r_pfr, col = height.colors(40))
# by pit2free algorithm v2
r_pfr2 <- grid_canopy(ndsm, res = 0.5,
pitfree(c(0,2,5,10,15,20), c(0, 1.5), subcircle = 0.2))
saveRDS(r_pfr2, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.rds")
writeRaster(r_pfr, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.tif",
overwrite = TRUE)
writeRaster(r_pfr, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free.tif",
overwrite = TRUE)
writeRaster(r_pfr, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free.tif",
overwrite = TRUE)
writeRaster(r_pfr2, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.tif",
overwrite = TRUE)
?focal
?writeRaster
?writeValues
?grid_canopy
?grid_canopy
?zonal
r_pfr2[r_pfr2 < 2.5] <- NA
plot(r_pfr2, col = height.colors(40))
npcl <- zonal(r_pfr2, mtr.ori$ARCI, fun = 'sum', na.rm = TRUE )
r_pfr2
mtr.ori
?crop
crop.pfr <- crop(r_pfr2, mtr.ori$ARCI)
plot(crop.pfr)
crop.pfr <- crop(r_pfr2, mtr.ori$ARCI, snap = 'out')
plot(crop.pfr)
crop.pfr
mtr.ori
crop.pfr <- crop(r_pfr2, mtr.ori$ARCI, snap = 'near')
crop.pfr
crop.pfr <- crop(r_pfr2, mtr.ori$ARCI, snap = 'in')
crop.pfr
crop.pfr <- crop(r_pfr2, mtr.ori$ARCI, snap = 'near')
crop.pfr
npcl <- zonal(crop.pfr, mtr.ori$ARCI, fun = 'sum', na.rm = TRUE )
?alignExtent
align.pfr <- alignExtent(mtr.ori, r_pfr2, snap = 'near')
align.pfr
class(align.pfr)
plot(align.pfr)
?merge
?raster::merge
merge.pfr <- merge(align.pfr, r_pfr2)
merge.pfr
merge.pfr <- merge(r_pfr2, align.pfr)
class(r_pfr2)
class(align.pfr)
?resample
?mask
mask.pfr <- mask(r_pfr2, mtr.ori)
