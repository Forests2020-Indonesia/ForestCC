graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
timestamp()
##------ Fri Mar 01 16:03:03 2019 ------##
time()
timestamp()
##------ Fri Mar 01 16:03:38 2019 ------##
options(stringsAsFactors = FALSE)
options(digits = 22)
library(lidR)
library(dplyr)
as_tibble(read.csv("ANCILLARY/Selected LAS South Sumatra.csv"))
listFiles <- read.csv("ANCILLARY/Selected LAS South Sumatra.csv")[,1]
pPath <- "/DATA/LIDAR GIZ/LAS (DSM)/Point Cloud GIZ Buffer 10m/"
chkLas = function(fname)
{
spl <- strsplit(fname, "_")
foldpath <- sapply(spl, function(x) paste0(x[1], "_", x[2]))
foldpath <- tolower(base::unique(foldpath))
las <- readLAS(paste0(pPath, foldpath, "/", fname, ".las"),
filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
sapply(listFiles, FUN = chkLas)
timestamp()
##------ Fri Mar 01 16:04:24 2019 ------##
t1 <- timestamp()
##------ Fri Mar 01 16:04:51 2019 ------##
t2 <- timestamp()
##------ Fri Mar 01 16:04:58 2019 ------##
t2-t1
tims(t2) - time(t1)
time(t2) - time(t1)
t2
class(t2)
install.packages("lubridate")
library(lubridate)
date(t1)
date()
time_length()
?time_length
d1 <- date()
options(stringsAsFactors = FALSE)
options(digits = 22)
library(lidR)
library(dplyr)
as_tibble(read.csv("ANCILLARY/Selected LAS South Sumatra.csv"))
listFiles <- read.csv("ANCILLARY/Selected LAS South Sumatra.csv")[,1]
pPath <- "/DATA/LIDAR GIZ/LAS (DSM)/Point Cloud GIZ Buffer 10m/"
chkLas = function(fname)
{
spl <- strsplit(fname, "_")
foldpath <- sapply(spl, function(x) paste0(x[1], "_", x[2]))
foldpath <- tolower(base::unique(foldpath))
las <- readLAS(paste0(pPath, foldpath, "/", fname, ".las"),
filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
sapply(listFiles, FUN = chkLas)
d2 <- date()
d2 - d1
d2
d1
rm(list=ls())
d1 <- date()
ctg <- catalog("/DATA/LIDAR GIZ/SELECTEDLAS/")
opt_cores(ctg) <- 4
opt_chunk_size(ctg) <- 0
opt_chunk_buffer(ctg) <- 0
ctgCheck <- function(x)
{
fname <- strsplit(x@files, "/")[[1]][5]
las <- readLAS(x, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n ============================== \n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
d2 <- date()
d1
d2
rm(list=ls())
?lasfilterdecimate
?lasfilterduplicates
rm(list=ls())
ctg <- catalog("/DATA/LIDAR GIZ/SELECTEDLAS/")
opt_chunk_buffer(rmu.cat) <- 0
opt_chunk_size(rmu.cat)   <- 0
opt_cores(ctg) <- 6
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
opt_output_files(ctg) <- "PROCESSED_DATA/SEL_PREPROCESS/{ORIGINALFILENAME}"
# define function ----
preprocess <- function(chunk)
{
las <- readLAS(chunk, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
# lasfilterduplicates
las <- lasfilterduplicates(las)
}
newctg = catalog_apply(rmu.cat, preprocess)
newctg = catalog_apply(ctg, preprocess)
rlas:::lasfilterusage()
rm(list=ls())
ctg <- catalog("PROCESSED_DATA/SEL_PREPROCESS/")
opt_cores(ctg) <- 4
opt_chunk_size(ctg) <- 0
opt_chunk_buffer(ctg) <- 0
ctgCheck <- function(x)
{
fname <- strsplit(x@files, "/")[[1]][5]
las <- readLAS(x, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n ============================== \n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
?lasfilter
rm(list=ls())
ctg <- catalog("/DATA/LIDAR GIZ/SELECTEDLAS/")
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 6
opt_output_files(ctg) <- "PROCESSED_DATA/SEL_PREPROCESS/{ORIGINALFILENAME}"
# define function ----
preprocess <- function(chunk)
{
las <- readLAS(chunk)
if(is.empty(las)) return(NULL)
# lasfilterduplicates
las <- lasfilterduplicates(las)
# drop Z less than zero
las <- lasfilter(las, Z >= 0)
}
newctg = catalog_apply(ctg, preprocess)
gc()
# define function ----
preprocess <- function(chunk)
{
las <- readLAS(chunk)
if(is.empty(las)) return(NULL)
# lasfilterduplicates
las <- lasfilterduplicates(las)
# drop Z less than zero
las <- lasfilter(las, Z >= 0)
}
newctg = catalog_apply(ctg, preprocess)
rm(list=ls())
ctg <- catalog("PROCESSED_DATA/SEL_PREPROCESS/")
opt_cores(ctg) <- 4
opt_chunk_size(ctg) <- 0
opt_chunk_buffer(ctg) <- 0
ctgCheck <- function(x)
{
fname <- strsplit(x@files, "/")[[1]][5]
las <- readLAS(x, filter = "-drop_z_below 0")
if(is.empty(las)) return(NULL)
writeLines("\n ============================== \n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
writeLines("\n")
cat("Unique class: ",unique(las@data$Classification))
print(table(las@data$Classification))
# height
writeLines("\n")
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
flgCheck <- catalog_apply(ctg, ctgCheck)
savehistory()
?grid_terrain
library(lidR)
?grid_terrain
?grid_canopy
rm(list=ls())
ctg <- catalog("PROCESSED_DATA/SEL_PREPROCESS/")
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
las <- readLAS("PROCESSED_DATA/SEL_PREPROCESS/LINE_2_37.las")
las
rlas:::lasfilterusage()
?lasfilter
stdmetrics_z()
?stdmetrics_z
las
lasmetrics(las, mean(Z))
lasmetrics(las, zmean)
?zmean
lasmetrics(las, .stdmetrics_z)
las <- readLAS("PROCESSED_DATA/SEL_PREPROCESS/LINE_8_1.las")
plot(las)
las
las <- readLAS("PROCESSED_DATA/SEL_PREPROCESS/LINE_4_86.las")
las
plot(las)
las <- readLAS("PROCESSED_DATA/SEL_PREPROCESS/LINE_7_2.las")
la
las
plot(las)
las <- readLAS("PROCESSED_DATA/SEL_PREPROCESS/LINE_2_70.las")
las
plot(las)
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST/")
plot(ctg)
rm(list=ls())
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST/")
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
opt_filter(ctg) <- "-drop_z_below 0"
opt_output_files(ctg) <- paste0("PROCESSED_DATA/SEL_DTM/{ORIGINALFILENAME}")
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(50L))
opt_chunk_buffer(ctg) <- 50
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(50L))
gc()
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST/")
opt_chunk_buffer(ctg) <- 50
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
opt_filter(ctg) <- "-drop_z_below 0"
opt_output_files(ctg) <- paste0("PROCESSED_DATA/SEL_DTM/{ORIGINALFILENAME}")
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(50L))
})
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(10L))
})
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST_SINGLE/")
rm(list=ls())
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST_SINGLE/")
ctg <- catalog("PROCESSED_DATA/CTG_SINGLE/")
opt_chunk_buffer(ctg) <- 50
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
opt_filter(ctg) <- "-drop_z_below 0"
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(10L))
})
ctg <- catalog("PROCESSED_DATA/CTG_SINGLE/")
opt_chunk_buffer(ctg) <- 50
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
opt_filter(ctg) <- "-drop_z_below 0"
opt_cores(ctg) <- 1
opt_filter(ctg) <- "-drop_z_below 0"
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(10L))
})
# a copy from RMULiDAR project's code
library(lidR)
rm(list=ls())
ctg <- catalog("/DATA/LIDAR GIZ/SELECTEDLAS/")
las <-
ctg <- catalog("PROCESSED_DATA/CTG_SINGLE/")
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 1
opt_chunk_buffer(ctg) <- 50
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 1
opt_filter(ctg) <- "-drop_z_below 0"
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging(10L))
})
system.time({
dtm <- grid_terrain(ctg, res=0.25, algorithm = tin())
})
?kriging
Sys.time()
d1 <- Sys.time()
d2 <- Sys.time()
d2-d1
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
d1 <- Sys.time()
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging())
d2 <- Sys.time()
d2-d1
d1 <- Sys.time()
dtm <- grid_terrain(ctg, res=0.25, algorithm = kriging())
d2 <- Sys.time()
d2-d1
cat(d1 <- Sys.time())
d1 <- Sys.time()
cat(d1)
print(d1)
library(grDevices)
?rosnerTest
ls()
library(lidR)
library(grDevices)
lraw <- readLAS("D:/FORESTS2020/DATA/LIDAR GIZ/LAS/Point Cloud GIZ Buffer 10m/line_8/LINE_8_1.las")
lraw <- readLAS("D:/FORESTS2020/DATA/LIDAR GIZ/LAS/Point Cloud GIZ Buffer 10m/line_8/LINE_8_1.las", filter="-drop_z_below 0")
writeLAS(lraw, "EXAMPLE_DATA/LINE_8_1.laz")
lraw
plot(lraw)
llraw <- readLAS("D:/FORESTS2020/DATA/LIDAR GIZ/LAS/Point Cloud GIZ Buffer 10m/line_8/LINE_8_1.las")
plot(l)
rm(llraw)
l <- readLAS("D:/FORESTS2020/DATA/LIDAR GIZ/LAS/Point Cloud GIZ Buffer 10m/line_8/LINE_8_1.las")
plot(l)
l
summary(l@data$Z)
summary(lraw@data$Z)
plot(lraw)
rm(lraw)
z <- l@data$Z
class(z)
z
z[which(z %in% boxplot.stats(z)$out)]
zout <- z[which(z %in% boxplot.stats(z)$out)]
zout <- z[!which(z %in% boxplot.stats(z)$out)]
zout
zout <- z[-which(z %in% boxplot.stats(z)$out)]
zout
length(zout)
nrow(l@data)
z_ftr <- lasfilter(l@data, Z %in% zout)
z_ftr <- lasfilter(l, Z %in% zout)
plot(z_ftr)
dtm <- grid_terrain(z_ftr, res = 0.25, algorithm = krigin(10L))
dtm <- grid_terrain(z_ftr, res = 0.25, algorithm = kriging(10L))
dtm <- grid_terrain(z_ftr, res = 0.5, algorithm = kriging(10L))
?grid_terrain
dtm <- grid_terrain(z_ftr, res = 0.25, algorithm = knnidw(k=10L, p=2))
lnorm <- lasnormalize(z_ftr, dtm)
plot(lnorm)
lnorm
gc()
writeLAS(lnorm, "PROCESSED_DATA/LAS_OUT/lnorm.laz")
ls()
gc()
lnorm <- readLAS("PROCESSED_DATA/LAS_OUT/lnorm.laz")
lnorm
plot(lnorm)
lnorm0 <- readLAS("PROCESSED_DATA/LAS_OUT/lnorm.laz", filter = "-drop_z_below 0")
plot(lnorm0)
l
ls()
l <- readLAS("D:/FORESTS2020/DATA/LIDAR GIZ/LAS/Point Cloud GIZ Buffer 10m/line_8/LINE_8_1.las")
summary(l@data$Z)
nrow(l@data$Z > 100)
nrow(dplyr::filter(l@data, Z > 100))
lzLT100 <- lasfilter(l, Z < 100)
dtm2 <- grid_terrain(lzLT100, res = 0.25, algorithm = knnidw(k=10L, p=2))
dtm3 <- grid_terrain(lzLT100, res = 0.25, algorithm = kriging())
lnorm2 <- lasnormalize(lzLT100, dtm2)
plot(lnorm2)
summary(lnorm2@data$Zref)
summary(lnorm2@data$Z)
nrow(lnorm2@data$Z)
nrow(dplyr::lnorm2@data, Z < 0)
nrow(dplyr::filter(lnorm2@data, Z < 0))
lnorm3 <- lasnormalize(lzLT100, dtm3)
plot(lnorm3)
summary(lnorm3@data$Z)
summary(lnorm2@data$Z)
summary(lnorm2@data$Z)
lnorm3 <- lasnormalize(lzLT100, dtm3)
plot(lnorm3)
?lasnormalize
plot(lnorm2)
ls()
plot(lnorm)
nrow(lnorm)
nrow(lnorm@data)
nrow(lnorm2@data)
plot(lnorm)
plot(lnorm2)
length(zout)
l <- readLAS("D:/FORESTS2020/DATA/LIDAR GIZ/LAS/Point Cloud GIZ Buffer 10m/line_8/LINE_8_1.las")
z <- l@data$Z
class(z)
z
z[which(z %in% boxplot.stats(z)$out)]
zout <- z[-which(z %in% boxplot.stats(z)$out)]
length(zout)
?boxplot.stats
boxplot.stats(z)
?boxplot.stats
out <- boxplot.stats(l)$out
out <- boxplot.stats(l)
boxplot.stats(l)
boxplot.stats(l@data)
boxplot.stats(l@data$Z)
out <- boxplot.stats(l@data$Z)$out
out
length(out)
length(z)
length(zout)
1340639-1317077
z
z[z %in% boxplot.stats(z)$out]
z[z %in% boxplot.stats(z)$out,]
_z <-
zz <- z[z %in% boxplot.stats(z)$out]
zz
length(zz)
zz <- z[-(z %in% boxplot.stats(z)$out)]
length(zz)
length(z)
nrow(l@data)
zz <- z[!(z %in% boxplot.stats(z)$out)]
length(zz)
1340639-1317077
nrow(l@data$Z)
nrow(l@data)
l
441280-406179
boxplot(l@data$Z)
nrow(dplyr::filter(l@data, Z > 500))
?boxplot.stats
z[z %in% boxplot.stats(z)$out]
zout <- z[!(z %in% boxplot.stats(z)$out)]
length(zout)
nrow(l@data) - length(zout)
zout <- z[!(z %in% boxplot.stats(z, coef = 1.0)$out)]
zout <- z[!(z %in% boxplot.stats(z)$out)]
zout2 <- z[!(z %in% boxplot.stats(z, coef = 1.0)$out)]
length(zout2)
zout2 <- z[!(z %in% boxplot.stats(z, coef = 0.5)$out)]
length(zout2)
zout2 <- z[!(z %in% boxplot.stats(z, coef = 0.1)$out)]
length(zout2)
nrow(l@data) - 142
length(zout)
zout2 <- z[!(z %in% boxplot.stats(z, coef = 2.0)$out)]
length(zout2)
zout2 <- z[!(z %in% boxplot.stats(z, coef = 1.5)$out)]
length(zout2)
nrow(l@data)
zout2 <- z[!(z %in% boxplot.stats(z, coef = 2.5)$out)]
length(zout2)
zout2 <- z[!(z %in% boxplot.stats(z, coef = 3.0)$out)]
length(zout2)
?boxplot
boxplot(l@data$Z, range=2.0)
boxplot(l@data$Z, range=3.0)
boxplot(l@data$Z, range=5.0)
zout2 <- z[!(z %in% boxplot.stats(z, coef = 5.0)$out)]
length(zout2)
