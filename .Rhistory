<<<<<<< HEAD
lstEVIs[[1]]
lstEVIs[[1]][[1]]
lstEVIs[[1]][[2]]
sapply(lstEVIs, function(x) {print(class(x))})
cvtMODISval <- function(x) {
print(x[[1]])
}
sapply(lstEVIs, function(x) cvtMODISval(x))
lstEVIs <- list(evifiles)
sapply(lstEVIs, function(x) cvtMODISval(x))
cvtMODISval <- function(x) {
print(x)
}
sapply(lstEVIs, function(x) cvtMODISval(x))
lstEVIs[[1:3]]
lstEVIs[1:3]
lstEVIs[[1:3]
]
test <- sapply(lstEVIS, "[", c(1:3))
test <- sapply(lstEVIs, "[", c(1:3))
sapply(test, function(x) cvtMODISval(x))
cvtMODISval <- function(x) {
x
}
sapply(test, function(x) cvtMODISval(x))
cvtMODISval <- function(x) {
raster(x)
}
sapply(test, function(x) cvtMODISval(x))
?gsub
cvtMODISval <- function(x) {
r <- raster(x)
r <- calc(r, fun = function(x) x * 0.0001)
fname <- gsub(x = x, pattern = "EVIMASKED",
replacement = "EVIMASKEDVALUECONVERTED")
print(fname)
writeRaster(r, filename = fname, overwrite = TRUE)
}
cvtMODISval <- function(x) {
r <- raster(x)
r <- calc(r, fun = function(x) x * 0.0001)
fname <- gsub(x = x, pattern = "EVIMASKED",
replacement = "EVIMASKEDVALUECONVERTED")
writeRaster(r, filename = fname, overwrite = TRUE)
}
cvtMODISval <- function(x) {
r <- raster(x)
r <- calc(r, fun = function(x) x * 0.0001)
fname <- gsub(x = x, pattern = "EVIMASKED",
replacement = "EVIMASKEDVALUECONVERTED")
writeRaster(r, filename = fname, overwrite = TRUE)
}
sapply(lstEVIs, function(x) cvtMODISval(x))
warnings
warnings()
evifiles
sapply(evifiles, FUN = function(x) {
fname <- gsub(pattern = "EVIMASKED",
replacement = "EVIMASKEDVALUECONVERTED",
names(x))
print(fname)
}
)
sapply(evifiles, FUN = function(x) {
fname <- gsub(pattern = "EVIMASKED",
replacement = "EVIMASKEDVALUECONVERTED",
x)
print(fname)
}
)
sapply(evifiles, FUN = function(x) {
r <- raster(x)
r <- calc(r, fun = function(x) x * 0.0001)
fname <- gsub(pattern = "EVIMASKED", replacement = "EVIMASKEDVALUECONVERTED", x)
print(fname)
writeRaster(r, filename = fname, overwrite = TRUE)
}
)
evifiles <- list.files("/DATA/MOD13Q120102018/EVIMASKEDVALUECONVERTED/", full.names = TRUE)
EVIs <- lapply(evifiles, FUN = function(x) raster(x))
# load pts
aoipts <- read_sf("/DATA/LIDAR GIZ/AOIGRID_MODIS_SINUS/all_line_sinus_modis_vgrid_pts.shp")
aoipts <- as(aoipts, "Spatial")
class(aoipts)# extract
?raster::extract
xtrpts <- raster::extract(EVIs, aoipts, sp = TRUE)
aoipts
names(aoipts)
xtrpts <- raster::extract(EVIs, aoipts, sp = TRUE)
aoipts
EVIs
rasterOptions(maxmemory = 1.0e+10)
options(stringsAsFactors = FALSE)
options(digits = 22)
library(lidR)
=======
library(raster)
>>>>>>> 769336922d4a3e72e0122e0493dd2cda679d2072
library(dplyr)
library(magrittr)
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
if(!file.exists(fname)) return(NULL)
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
print(listInpFolder[1])
print(listInpFolder[1], "asdfad")
print(paste0(listInpFolder[1], "asdfad"))
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
if(!file.exists(fname)) {
print(paste("File: ", shortFileName, "exist!"))
return(NULL)
}
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
if(file.exists(fname)) {
print(paste("File: ", shortFileName, "exist!"))
return(NULL)
}
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
if(file.exists(fname)) {
print(paste("File: ", shortFileName, "exist!"))
return(1)
}
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
print(fname)
if(file.exists(fname)) {
print(paste("File: ", shortFileName, "exist!"))
return(1)
}
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
listInpFolder
gc()
options(stringsAsFactors = FALSE)
options(digits = 22)
library(lidR)
library(dplyr)
library(magrittr)
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
print(fname)
if(file.exists(fname)) {
print(paste("File: ", shortFileName, "exist!"))
return(1)
}
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
listInpFolder
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
source('C:/FORESTS2020/CODES/ForestCC/R-OLD/sel_metrics.R', echo=TRUE)
# fname <- "line_2_81"
chkLas = function(fname, lname)
{
splitName <- strsplit(fname, "/")
shortFileName <- splitName[[1]][length(splitName[[1]])]
sinkFileName <- paste0(baseLogFolder, lname, "/",
gsub(".las", ".txt", shortFileName))
print(fname)
if(file.exists(sinkFileName)) {
print(paste("File log of: ", fname, "exist!"))
return(NULL)
}
<<<<<<< HEAD
cat(shortFileName)
las <- readLAS(fname)
if(is.empty(las)) return(NULL)
writeLines("\n")
sink(sinkFileName)
# print las info
print(las); writeLines("\n")
# lascheck
lascheck(las); writeLines("\n")
# classification
print("Classification:")
las@data %>%
group_by(as.factor(Classification)) %>% summarize(N = n()) %>% print()
writeLines("\n")
# height
print("Height:")
print(summary(las@data$Z)); writeLines("\n")
# ScanAngleRank (i.e.:Scanning Angle)
print("Scanning Angle:")
print(summary(las@data$ScanAngleRank)); writeLines("\n")
closeAllConnections()
# plot
plotFileName <- paste0(baseFigFolder, lname,  "/",
gsub(".las", ".jpg", shortFileName))
jpeg(plotFileName) # the output folder should be predetermined
graphics::hist(las@data$Z, main=fname, breaks=15)
dev.off()
rm(las)
}
baseOutFolder <- "/FORESTS2020/CODES/ForestCC/PROCESSED_DATA/V03/LASCHECK/"
baseLogFolder <- paste0(baseOutFolder, "LOGS/")
baseFigFolder <- paste0(baseOutFolder, "FIGS/")
baseInpFolder <- "/DATA/LIDAR GIZ/LAS" # folder in which the line folders exist
listInpFolder <- list.dirs(baseInpFolder)
for(i in 2:length(listInpFolder)) {  # the subfolder starts from index no.2
splitName <- strsplit(listInpFolder[i], "/")
shortLineName <- splitName[[1]][length(splitName[[1]])]
# create output folders
dir4Log = paste0(baseLogFolder, shortLineName) # output folder for lascheck perline
dir4Fig = paste0(baseFigFolder, shortLineName)
if(!dir.exists(dir4Log)) dir.create(dir4Log)
if(!dir.exists(dir4Fig)) dir.create(dir4Fig)
# list the las files under the base input folder and apply a funtion to check
listFiles <- list.files(listInpFolder[i], full.names = TRUE)
sapply(listFiles, FUN = function(x) chkLas(x, shortLineName))
}
gc()
listInpFolder
gc()
ls()
=======
# read las
lasfname <-"/DATA/LIDAR GIZ/LAS (DSM)/PINDAHDATA/STAGE3/LINE_2_82.las"
line2.82 <- readLAS(lasfname)
lascheck(line2.82)
# filter duplicates
lasf <- lasfilterduplicates(line2.82)
lascheck(lasf)
dtm <- readRDS("PROCESSED_DATA/LINE_2_82/dtm.rds")
dtm
plot(dtm)
ndsm <- readRDS("PROCESSED_DATA/LINE_2_82/nDSM.rds")
mtr.ori <- readRDS("PROCESSED_DATA/LINE_2_82/CCindex_ori_scanangle.rds")
r_pfr2 <- readRDS("PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.rds")
plot(r_pfr2)
plot(mtr.ori, col = height.colors(40))
mtr.ori
r_pfr2
extent
extent(mtr.ori)
?resample
gdalUti
mtr.ori
projection(mtr.ori)
projection(r_pfr2
)
?crs
CRS("+init:epsg = 32748")
CRS("+init:epsg=32748")
CRS("+init=epsg:32748")
projection(mtr.ori) <- CRS("+init=epsg:32748")
mtr.ori
projection(r_pfr2) <- CRS("+init=epsg:32748")
saveRDS(mtr.ori, "PROCESSED_DATA/LINE_2_82/CCindex_ori_scanangle.rds")
saveRDS(r_pfr2, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.rds")
saveRDS(r_pfr2, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.rds")
writeRaster(r_pfr2, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.tif",
overwrite = TRUE)
npcl <- zonal(r_pfr2, mtr.ori$ARCI, fun = 'sum', na.rm = TRUE )
extent(r_pfr2)
?crop
crop.pfr <- crop(r_pfr2, extent(mtr.ori))
extent(crop.pfr)
crop.pfr <- crop(r_pfr2, extent(mtr.ori), snap = "near")
extent(crop.pfr)
mask.pfr <- mask(r_pfr2, mtr.ori)
?raster
res
res(r_pfr2)
nullgrids <- raster(res = res(r_pfr2), crs = CRS("+init=epsg:32748"),
extent(crop.pfr))
plot(nullgrids)
class(nullgrids)
nullgrids <- 1
plot(nullgrids)
nullgrids <- raster(res = res(r_pfr2), crs = CRS("+init=epsg:32748"),
ext = extent(crop.pfr))
plot(nullgrids)
extent(mtr.ori)
extent(mtr.ori)[1]
extent(mtr.ori)[2]
e_mtr.ori <- extent(mtr.ori)
nrows <- e_mtr.ori[4] - e_mtr.ori[3]
ncolumns <- e_mtr.ori[2] - e_mtr.ori[1]
ncolumns
nrowa
nrows
nkolom <- e_mtr.ori[2] - e_mtr.ori[1]
nbaris <- e_mtr.ori[4] - e_mtr.ori[3]
nullgrids <- raster(nrows = nbaris, ncols = nkolom, res(r_pfr2), crs = CRS("+init=epsg:32748"),
ext = extent(mtr.ori))
nullgrids <- raster(nrows = nbaris, ncols = nkolom, res(r_pfr2), crs = CRS("+init=epsg:32748"),
ext = extent(mtr.ori), values= TRUE)
nullgrids <- raster(nrows = nbaris, ncols = nkolom,
xmn = e_mtr.ori[1], xmx = e_mtr.ori[2],
res(r_pfr2), crs = CRS("+init=epsg:32748"))
nbaris
nkolom
nbaris <- e_mtr.ori[4] - e_mtr.ori[3]
nkolom <- e_mtr.ori[2] - e_mtr.ori[1]
extent(mtr.ori)
9768205-9767635
r1 <- raster(nrows=108, ncols=21, xmn=0, xmx=10)
nullgrids <- raster(nrows = nbaris, ncols = nkolom,
xmn = e_mtr.ori[1], xmx = e_mtr.ori[2])
nullgrids <- raster(nrows = nbaris, ncols = nkolom,
xmn = e_mtr.ori[1], xmx = e_mtr.ori[2], ext = extent(mtr.ori))
plot(nullgrids)
nullgrids <- raster(nrows = nbaris, ncols = nkolom,
xmn = e_mtr.ori[1], xmx = e_mtr.ori[2],
ext = extent(mtr.ori), crs = CRS("+init=epsg:32748"))
plot(nullgrids)
?merge
merge(r_pfr2, nullgrids)
res(r_pfr2)
nullgrids <- raster(nrows = nbaris, ncols = nkolom,
xmn = e_mtr.ori[1], xmx = e_mtr.ori[2],
ext = extent(mtr.ori), crs = CRS("+init=epsg:32748"),
resolution = res(r_pfr2))
merge(r_pfr2, nullgrids)
merge(r_pfr2, nullgrids) %>% plot
merge(r_pfr2, nullgrids) %>% extent
m_pfr2 <- merge(r_pfr2, nullgrids)
npcl <- zonal(m_pfr2, mtr.ori, fun = 'sum', na.rm = TRUE )
npcl <- zonal(m_pfr2, mtr.ori$ARCI, fun = 'sum', na.rm = TRUE )
extent(mtr.ori)
extent(mtr.ori$ARCI)
class(mtr.ori$ARCI)
extent(m_pfr2)
plot(mtr.ori$ARCI, add= TRUE)
tile282 <- readOGR("/DATA/LIDAR GIZ/AOITILE/Tile_2_82_vgrid.shp")
extract(r_pfr2, tile282, fun=function(x) length(x))
extract(r_pfr2, tile282, fun=function(x) length(x), sp = TRUE, na.rm = TRUE)
extract(r_pfr2, tile282, fun = function(x) { length(x)}, sp = TRUE, na.rm = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282, fun = function(x) { length(x)}, sp = TRUE, na.rm = TRUE)
tile282
xtr_pfr2 <- raster::extract(r_pfr2, tile282, fun = function(x) { length(x)}, sp = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282, fun = length(x), sp = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282, fun = function(x, ...) { length(x)}, sp = TRUE)
plot(xtr_pfr2)
writeOGR(xtr_pfr2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly.shp",
layer = extract_numpix_by_poly,
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
writeOGR(xtr_pfr2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly.shp",
layer = "extract_numpix_by_poly",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282,
fun = function(x, ...) {
validpix <- x[!is.na()]
return(sum(validpix))},
sp = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282,
fun = function(x, ...) {
validpix <- x[!is.na(x)]
return(sum(validpix))},
sp = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282,
fun = function(x, ...) {
validpix <- x[!is.na(x)]
return(sum(validpix))},
sp = TRUE)
writeOGR(xtr_pfr2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly.shp",
layer = "extract_numpix_by_poly",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
xxx <- c(1, 0, 3, NA, NA)
length(xxx)
xxx[is.na(xxx)]
xxx[!is.na(xxx)]
30/0.5
60*60
xxx[xxx>0]
xxx[xxx > 0]
xxx[!is.na(xxx)]
xxx > 2.5
is.na(xxx)
!is.na(xxx)
xtr_pfr2 <- raster::extract(r_pfr2, tile282,
fun = function(x, ...) {
notNA = !is.na(x)
hGT2.5 = x > 2.5
nvalid = sum(notNA & hGT2.5)
CCidx  = nvalid / 3600 # 60 x 60 cells
return(CCidx)},
sp = TRUE)
writeOGR(xtr_pfr2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly.shp",
layer = "extract_numpix_by_poly",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
centergr
centergrd
lasfname
# calculate pcl-based CC index ----
coords <- calc_pos(lasfname)
sel_grid
plot(sel_grid)
plot(sel_grid["layer"])
xtr_pfr2 <- raster::extract(r_pfr2, sel_grid,
fun = function(x, ...) {
notNA = !is.na(x)
hGT2.5 = x > 2.5
nvalid = sum(notNA & hGT2.5)
CCidx  = nvalid / 3600 # 60 x 60 cells
return(CCidx)},
sp = TRUE)
writeOGR(xtr_pfr2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly.shp",
layer = "extract_numpix_by_poly",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
arci.frci
mtr
mtr.all
mtr.nar <- readRDS("PROCESSED_DATA/LINE_2_82/CCindex_narrow_scanangle.rds")
projection(mtr.ori)
projection(mtr.nar)
projection(mtr.nar) <- CRS("+init=epsg:32748")
saveRDS(mtr.nar, "PROCESSED_DATA/LINE_2_82/CCindex_narrow_scanangle.rds")
# center grid
# sel_grid was created in a
centergrd <- st_centroid(sel_grid)
spgrd <- as(centergrd, "Spatial")
# stacking all
mtr.all <- stack(mtr.nar, mtr.ori)
names(mtr.all)
writeRaster(mtr.all, "PROCESSED_DATA/metric_scan_angle_effect.tif",
overwrite = TRUE)
writeRaster(mtr.all, "PROCESSED_DATA/metric_scan_angle_effect_all_layers.tif",
overwrite = TRUE)
xtr_pfr2.2 <- raster::extract(mtr.all, xtr_pfr2)
names(xtr_pfr2.2)
names(xtr_pfr2.2@data)
class(mtr.all)
head(mtr.all)
xtr_pfr2.2 <- raster::extract(mtr.all, xtr_pfr2, sp = TRUE)
class(xtr_pfr2.2)
?easter::extract
?raster::extract
sf.xtr_pfr2 <- st_centroid(xtr_pfr2)
class(xtr_pfr2)
sf.xtr_pfr2 <- st_centroid(xtr_pfr2)
?st_centroid
xtr_pfr2.2 <- raster::extract(mtr.all, spgrd, sp = TRUE)
class(xtr_pfr2.2)
pts.mtr.all <- raster::extract(mtr.all, spgrd, sp = TRUE)
xtr_pfr2.2 <- st_join(pts.mtr.all, xtr_pfr2, join = st_intersects)
?over
xtr_pfr2.2 <- sp::over(pts.mtr.all, xtr_pfr2)
names(xtr_pfr2.2)
names(pts.mtr.all)
names(xtr_pfr2)
xtr_pfr2.2 <- sp::over(pts.mtr.all[], xtr_pfr2)
names(xtr_pfr2.2)
xtr_pfr2.2 <- st_join(st_as_sf(pts.mtr.all), st_as_sf(xtr_pfr2))
names(xtr_pfr2.2)
writeOGR(xtr_pfr2.2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly_v2.shp",
layer = "extract_numpix_by_poly_v2",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
writeOGR(as(xtr_pfr2.2, "Spatial"), dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly_v2.shp",
layer = "extract_numpix_by_poly_v2",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
# plotting
xtr_pfr2.2 <- xtr_pfr2.2[order(xtr_pfr2.2$naARCI),]
xtr_pfr2.2$sortID <- 1:nrow(xtr_pfr2.2)
ggplot(xtr_pfr2.2, aes(x=sortID)) +
geom_line(aes(y = naFRCI, colour = "naFRCI")) +
geom_line(aes(y = naARCI, colour = "naARCI")) +
geom_line(aes(y = Z, colour = "chmCCi")) +
#geom_point(aes(y=naFRCI)) + geom_point(aes(y=naARCI)) +
scale_color_manual(values = c("red", "black", "blue")) +
ylab("CC Index") + xlab("obs.index")
# stacking ARCI dan FRCI
arci.frci <- stack(mtr.nar$naARCI, mtr.nar$naFRCI)
df.acci <- as.data.frame(arci.frci)
df.acci <- df.acci[order(df.acci$naARCI), ]
df.acci$sortID <- 1:nrow(df.acci)
ggplot(df.acci, aes(x=sortID)) + geom_line(aes(y = naFRCI, colour = "naFRCI")) +
geom_line(aes(y = naARCI, colour = "naARCI")) +
#geom_point(aes(y=naFRCI)) + geom_point(aes(y=naARCI)) +
scale_color_manual(values = c("red", "black")) + ylab("CC Index") + xlab("obs.index")
dplyr::filter(df.acci, naFRCI == 1, sortID < 50)
dplyr::filter(xtr_pfr2.2, naFRCI == 1)
dplyr::filter(xtr_pfr2.2, naFRCI> 0.5)
head(df.acci, 30)
head(xtr_pfr2.2, 30)
nrow(df.acc)
nrow(df.acci)
nrow(xtr_pfr2.2)
dplyr::filter(xtr_pfr2.2, Z < 0.52, sortID < 30)
dplyr::filter(xtr_pfr2.2, Z < 0.52 & Z > 0.5, sortID < 30)
dplyr::filter(xtr_pfr2.2, Z < 0.52 & Z > 0.5, naFRCI > 0.6, sortID < 30)
dplyr::filter(xtr_pfr2.2, Z < 0.52 & Z > 0.5, naFRCI > 0.55, sortID < 30)
summary(cars)
summary(cars)
```{r}
summary(cars)
plot(cars)
ls()
library(lidR)
>>>>>>> 769336922d4a3e72e0122e0493dd2cda679d2072
