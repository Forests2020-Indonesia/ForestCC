epochs = epochs,
validation_data = list(valid.Bands, valid.FRCI),
verbose = 0,
callbacks = list(print_dot_callback))
pred_FRCI <- model_keras %>% predict(valid.Bands)
model_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = valid.FRCI)
}
predict
model_keras %>% predict(valid.Bands)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
train.Bands <- Bands[-sel, ]
train.FRCI <- FRCI[-sel, ]
valid.Bands <- Bands[sel, ]
valid.FRCI <- FRCI[sel, ]
model_bands <- build_model(train.Bands, "relu", "mean_squared_error")
model_keras[[fold]] <- model_bands %>%
fit(x = train.Bands,
y = train.FRCI,
batch_size = 173,  # total samples is 3460
epochs = epochs,
validation_data = list(valid.Bands, valid.FRCI),
verbose = 0,
callbacks = list(print_dot_callback))
pred_FRCI <- model_keras[[fold]] %>% predict(valid.Bands)
model_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = valid.FRCI)
}
use_session_with_seed(12345, disable_parallel_cpu = FALSE)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
train.Bands <- Bands[-sel, ]
train.FRCI <- FRCI[-sel, ]
valid.Bands <- Bands[sel, ]
valid.FRCI <- FRCI[sel, ]
model_bands <- build_model(train.Bands, "relu", "mean_squared_error")
model_keras[[fold]] <- model_bands %>%
fit(x = train.Bands,
y = train.FRCI,
batch_size = 173,  # total samples is 3460
epochs = epochs,
validation_data = list(valid.Bands, valid.FRCI),
verbose = 0,
callbacks = list(print_dot_callback))
pred_FRCI <- model_keras[[fold]] %>% predict(valid.Bands)
model_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = valid.FRCI)
}
model[[fold]]
model_keras[[fold]]
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
train.Bands <- Bands[-sel, ]
train.FRCI <- FRCI[-sel, ]
valid.Bands <- Bands[sel, ]
valid.FRCI <- FRCI[sel, ]
model_bands <- build_model(train.Bands, "relu", "mean_squared_error")
model_keras[[fold]] <- model_bands %>%
fit(x = train.Bands,
y = train.FRCI,
batch_size = 173,  # total samples is 3460
epochs = epochs,
validation_data = list(valid.Bands, valid.FRCI),
verbose = 0,
callbacks = list(print_dot_callback))
pred_FRCI <- model_bands %>% predict(valid.Bands)
model_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = valid.FRCI)
}
use_session_with_seed(12345, disable_parallel_cpu = FALSE)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
train.Bands <- Bands[-sel, ]
train.FRCI <- FRCI[-sel, ]
valid.Bands <- Bands[sel, ]
valid.FRCI <- FRCI[sel, ]
model_bands <- build_model(train.Bands, "relu", "mean_squared_error")
model_keras[[fold]] <- model_bands %>%
fit(x = train.Bands,
y = train.FRCI,
batch_size = 173,  # total samples is 3460
epochs = epochs,
validation_data = list(valid.Bands, valid.FRCI),
verbose = 0,
callbacks = list(print_dot_callback))
pred_FRCI <- model_bands %>% predict(valid.Bands)
model_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = valid.FRCI)
}
model_rmse
head(Bands)
model_keras
sqrt(0.01986)
model_rmse
model_keras
sqrt(0.01886)
model_rmse
sqrt(0.01886)
model_rmse
model_keras
use_session_with_seed(12345, disable_parallel_cpu = FALSE)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
train.Bands <- Bands[-sel, ]
train.FRCI <- FRCI[-sel, ]
valid.Bands <- Bands[sel, ]
valid.FRCI <- FRCI[sel, ]
model_bands <- build_model(train.Bands, "relu", "mean_squared_error")
model_keras[[fold]] <- model_bands %>%
fit(x = train.Bands,
y = train.FRCI,
batch_size = 173,  # total samples is 3460
epochs = epochs,
validation_data = list(valid.Bands, valid.FRCI),
verbose = 0,
callbacks = list(print_dot_callback))
pred_FRCI <- model_bands %>% predict(valid.Bands)
model_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = valid.FRCI)
}
model_rmse
model_keras
?caret::tune
?e1071::tune()
model_svr <- vector("list", 10)
svr_rmse <- vector("list", 10)
dataset_frci
?svm
names(dataset_frci)
names(iris)
str(irs)
str(iris)
names(dataset_frci)
frci.bands <- dataset_frci %>% dplyr::select(FRCI, b2, b3, b4, b5, b6, b7)
ls()
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ]
validate_data <- frci.bands[sel, ]
model_svr[[fold]] <- svm(FRCI ~ . , training)
pred_FRCI <- model_bands %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
library(e1071)
library(caret)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ]
validate_data <- frci.bands[sel, ]
model_svr[[fold]] <- svm(FRCI ~ . , training)
pred_FRCI <- model_bands %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ]
validate_data <- frci.bands[sel, ]
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_bands %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% as.data.frame()
validate_data <- frci.bands[sel, ] %>% as.data.frame()
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_bands %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
?select
names(training_data)
dplyr::select(training_data, -geometry())
dplyr::select(training_data, -geometry
)
dplyr::select(training_data, -geometry) %>% names
training_data <- frci.bands[-sel, ] %>% dplyr::select(-geometry)
class(training_data)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% dplyr::select(-geometry)
validate_data <- frci.bands[sel, ] %>% dplyr::select(-geometry)
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_bands %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
dplyr::select(training_data, sel)
training_data <- frci.bands[-sel, ] %>% dplyr::select(-geometry) %>% as.data.frame
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% dplyr::select(-geometry) %>% as.data.frame
validate_data <- frci.bands[sel, ] %>% dplyr::select(-geometry) %>% as.data.frame
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_bands %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
training_data <- frci.bands[-sel, ] %>% dplyr::select(-geometry) %>% as.data.frame
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
class(training_data)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
validate_data <- frci.bands[sel, ] %>% st_drop_geometry()
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_bands %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
?predict
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
validate_data <- frci.bands[sel, ] %>% st_drop_geometry()
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_svr[[fold]] %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
model_rmse
svr_rmse
model_rmse
class(model_bands)
class(model_keras[1]
)
model_keras[[1]]
class(model_keras[[1]])
model_bands
?%<-%
model_rmse
?%<-%
library(magrittr)
?%<-%
library(keras)
?%<-%
%<-%
?Special
?clusterR
install.packages(snow)
install.packages("snow")
beginCluster()
endCluster()
beginCluster()
endCluster()
class(colwise_bands)
?predict
ls()
ls()
model_keras
class(model_keras)
class(model_keras[[1]])
ls()
library(keras)
library(magrittr)
library(dplyr)
library(sf)
library(ggplot2)
library(raster)
library(caret)
rasterOptions(maxmemory = 1.2e+10)
rasterOptions(chunksize = 1e+9)
rm(list=ls())
dataset_frci <- readRDS("PROCESSED_DATA/SET_SAMPLES/dataset_frci.RDS")
Bands <- as.data.frame(dataset_frci) %>%
dplyr::select(b2, b3, b4, b5, b6, b7) %>%
as.matrix %>%
round(3)
FRCI <- as.data.frame(dataset_frci) %>%
dplyr::select(FRCI) %>%
as.matrix() %>%
round(3)
# model development ----
build_model <- function(traindata, actfunc, strmetrics) {
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = actfunc,
input_shape = dim(traindata)[2]) %>%
layer_dense(units = 16, activation = actfunc) %>%
layer_dense(units = 1)
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(),
metrics = list(strmetrics)
)
model
}
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 90 == 0) cat("\n")
cat(".")
}
)
epochs <- 500
model_keras_history <- vector("list", 10)
keras_rmse <- vector("list", 10)
model_keras <- vector("list", 10)
use_session_with_seed(12345, disable_parallel_cpu = FALSE)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
train.Bands <- Bands[-sel, ]
train.FRCI <- FRCI[-sel, ]
valid.Bands <- Bands[sel, ]
valid.FRCI <- FRCI[sel, ]
model_tmp <- build_model(train.Bands, "relu", "mean_squared_error")
model_keras_history[[fold]] <- model_tmp %>%
fit(x = train.Bands,
y = train.FRCI,
batch_size = 173,  # total samples is 3460
epochs = epochs,
validation_data = list(valid.Bands, valid.FRCI),
verbose = 0,
callbacks = list(print_dot_callback))
model_keras[[fold]] <- model_tmp
pred_FRCI <- model_tmp %>% predict(valid.Bands)
keras_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = valid.FRCI)
}
# save model ----
model_keras %>% saveRDS("PROCESSED_DATA/SEL_MODELS/model_bands_20190508.RDS")
model_tmp
tmp_frci <- model_tmp %>% predict(valid.Bands)
tmp_frci
tmp_frci2 <- model_keras[[7]] %>% predict(valid.Bands)
tmp_frci2
tmp_frci2 <- model_keras[[5]] %>% predict(valid.Bands)
tmp_frci2
sel_raster_path = "PROCESSED_DATA/SEL_RASTER"
sel_raster <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = TRUE)
sel_raster
sel_raster0 <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = FALSE)
sel_raster0 <- gsub(".tif", "", sel_raster0)
class(sel_raster)
# list_raster <- lapply(sel_raster, FUN = function(x) raster(x))
list_raster <- lapply(sel_raster, FUN = function(x) brick(x))
rm(list_raster)
# list_raster <- lapply(sel_raster, FUN = function(x) raster(x))
list_brick <- lapply(sel_raster, FUN = function(x) brick(x))
names(list_brick)
list_brick
names(list_brick)
# names(list_raster) <- sel_raster0
names(list_brick) <- sel_raster0
list_brick
sel_raster[1:6]
sel_raster <- sel_raster[1:6]
sel_raster0 <- sel_raster0[1:6]
# list_raster <- lapply(sel_raster, FUN = function(x) raster(x))
list_brick <- lapply(sel_raster, FUN = function(x) brick(x))
# names(list_raster) <- sel_raster0
names(list_brick) <- sel_raster0
list_brick
# mask_raster <- lapply(list_raster, function(x) crop(x, mask_extrapolation))
list_matrix <- lapply(list_brick, function(x) as.matrix(x))
rm(list_matrix)
# mask_raster <- lapply(list_raster, function(x) crop(x, mask_extrapolation))
# list_matrix <- lapply(list_brick, function(x) as.matrix(x))
list_vector <- lapply(list_brick, function(x) x[])
# remove band QA and select certain layers for certain purpose
# list_vector <- list_vector[-7]
# vect_bands  <- list_vector[c("b2", "b3", "b4", "b5", "b6", "b7")]
# colwise_bands <- do.call(cbind, vect_bands)
colwise_bands <- do.call(cbind, list_vector)
keras_rmse
# extrapolate  ----
extrapolate_FRCI <- model_keras[[8]] %>% predict(colwise_bands)
extrapolation_raster <- list_raster[[1]] # copy the raster framework (shell?)
extrapolation_raster <- list_brick[[1]] # copy the raster framework (shell?)
extrapolation_raster[] <- extrapolate_FRCI
writeRaster(extrapolation_raster, "PROCESSED_DATA/RASTER_EVAL/extr_model_fold8_20190508.tif",
overwrite = TRUE)
?predict
frci.bands <- dataset_frci %>% dplyr::select(FRCI, b2, b3, b4, b5, b6, b7)
model_svr <- vector("list", 10)
svr_rmse <- vector("list", 10)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
validate_data <- frci.bands[sel, ] %>% st_drop_geometry()
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_svr[[fold]] %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
svr_rmse
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
extrapolate_frci_svr
class(extrapolate_FRCI)
class(extrapolate_frci_svr)
dim(extrapolate_FRCI)
length(extrapolate_frci_svr)
dim(colwise_bands)
dim(validate_data)
names(validate_data)
model_svr[[8]]
summary(model_svr[[8]])
names(colwise_bands)
class(colwise_bands)
dim(colwise_bands)
colnames(colwise_bands)
head(colwise_bands)
sum(is.na(colwise_bands))
109313545/6
18218924+length(extrapolate_frci_svr)
?predict
?ifelse
head(extrapolate_FRCI)
sum(is.nan(extrapolate_FRCI))
sum(is.numeric(extrapolate_FRCI))
extrapolate_FRCI
tail(extrapolate_FRCI)
plot(extrapolation_raster)
head(colwise_bands)
colwise_bands[is.na(colwise_bands)] <- -9999
beginCLuster()
beginCluster()
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
gc()
rm(extrapolate_frci_frci)
rm(extrapolate_frci_svr)
endCluster()
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
gc()
sel_raster_path = "PROCESSED_DATA/SEL_RASTER"
rm(list=ls())
library(dplyr)
library(e1071)
library(caret)
rasterOptions(maxmemory = 1.2e+10)
rasterOptions(chunksize = 1e+9)
dataset_frci <- readRDS("PROCESSED_DATA/SET_SAMPLES/dataset_frci.RDS")
frci.bands <- dataset_frci %>% dplyr::select(FRCI, b2, b3, b4, b5, b6, b7)
model_svr <- vector("list", 10)
svr_rmse <- vector("list", 10)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
validate_data <- frci.bands[sel, ] %>% st_drop_geometry()
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_svr[[fold]] %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
sel_raster_path = "PROCESSED_DATA/SEL_RASTER"
sel_raster <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = TRUE)
sel_raster0 <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = FALSE)
sel_raster0 <- gsub(".tif", "", sel_raster0)
sel_raster <- sel_raster[1:6]
sel_raster0 <- sel_raster0[1:6]
list_brick <- lapply(sel_raster, FUN = function(x) brick(x))
ist_vector <- lapply(list_brick, function(x) x[])
list_vector <- ist_vector
rm(list_vector)
list_vector <- ist_vector
rm(ist_vector)
colwise_bands <- do.call(cbind, list_vector)
saveRDS(colwise_bands, "PROCESSED_DATA/SEL_RASTER_COMBINED/colwise_bands_with_NA.tif")
# svr can't handle NA, need to adjust dataset
colwise_bands[is.na(colwise_bands)] <- -9999
saveRDS(colwise_bands, "PROCESSED_DATA/SEL_RASTER_COMBINED/colwise_bands_wo_NA.tif")
rm(list_vector)
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
nrow(colwise_bands)
rasterOptions(maxmemory = 1.5e+10)
rasterOptions(chunksize = 1e+9)
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
gc()
library(raster)
rasterOptions(maxmemory = 1.5e+10)
rasterOptions(chunksize = 1e+9)
rm(list=ls())
rasterOptions(maxmemory = 1.5e+10)
rasterOptions(chunksize = 1e+9)
sel_raster_path = "PROCESSED_DATA/SEL_RASTER"
sel_raster <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = TRUE)
sel_raster0 <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = FALSE)
sel_raster0 <- gsub(".tif", "", sel_raster0)
sel_raster <- sel_raster[1:6]
sel_raster0 <- sel_raster0[1:6]
list_brick <- lapply(sel_raster, FUN = function(x) brick(x))
list_vector <- lapply(list_brick, function(x) x[])
colwise_bands <- do.call(cbind, list_vector)
library(dplyr)
library(e1071)
library(caret)
rasterOptions(maxmemory = 1.5e+10)
rasterOptions(chunksize = 1e+9)
dataset_frci <- readRDS("PROCESSED_DATA/SET_SAMPLES/dataset_frci.RDS")
frci.bands <- dataset_frci %>% dplyr::select(FRCI, b2, b3, b4, b5, b6, b7)
model_svr <- vector("list", 10)
svr_rmse <- vector("list", 10)
rm(list=ls())
rasterOptions(maxmemory = 1.5e+10)
rasterOptions(chunksize = 1e+9)
dataset_frci <- readRDS("PROCESSED_DATA/SET_SAMPLES/dataset_frci.RDS")
frci.bands <- dataset_frci %>% dplyr::select(FRCI, b2, b3, b4, b5, b6, b7)
model_svr <- vector("list", 10)
svr_rmse <- vector("list", 10)
for(fold in unique(dataset_frci$fold)){
cat("\n Fold: ", fold)
sel <- which(dataset_frci$fold == fold)
training_data <- frci.bands[-sel, ] %>% st_drop_geometry()
validate_data <- frci.bands[sel, ] %>% st_drop_geometry()
model_svr[[fold]] <- svm(FRCI ~ . , training_data)
pred_FRCI <- model_svr[[fold]] %>% predict(validate_data)
svr_rmse[[fold]] <- caret::RMSE(pred=pred_FRCI, obs = validate_data$FRCI)
}
colwise_bands <- readRDS("PROCESSED_DATA/SEL_RASTER_COMBINED/colwise_bands_wo_NA.tif")
extrapolate_frci_svr <- model_svr[[8]] %>% predict(colwise_bands)
gc()
