library(raster)
library(dplyr)
library(magrittr)
library(sf)
library(ggplot2)
library(rgdal)
sel_metrics = function(z, htree, rn, nr, cls)
{
vg <- (cls >= 3 & cls <= 5) # vegetation
# arci = all return canopy index
ar <- (z >= 0) # semua return
ac =  vg & (z >= htree) # return dari kanopi harus dari vegetasi dengan ketinggian minimal 2.5m (pengalaman field work di RMU)
arci = sum(ac) / sum(ar)
# FRCI = first return canopy index
sr <- (nr == 1) # single return when only 1 beam and 1 return )
fr <- (nr  > 1) & (rn == 1)  # frist return from many return
# frci'a denominator
fc <- fr & vg & (z >= htree)
sc <- sr & vg & (z >= htree)
frci = (sum(sc) + sum(fc)) / (sum(sr) + sum(fr))
# mean intensity from first return only
#mean_ity <- mean(ity)
# print(paste0("FRCI = ", frci))
# return all indexes
return(list(ARCI = arci, FRCI = frci))
}
calc_pos <- function(chunk_name)
{
aoidir <- "/DATA/LIDAR GIZ/AOI/"
vgrdir <- "/FORESTS2020/CODES/ForestCC/ANCILLARY/VGRID/"
split_chunk_name <- strsplit(chunk_name, "/")
fname_las <- split_chunk_name[[1]][length(split_chunk_name[[1]])]
split_fname_las <- strsplit(fname_las, "_")
fn_flightline <- paste0(split_fname_las[[1]][1],
"_",
split_fname_las[[1]][2],
".shp")
fn_vecgrid <- paste0(split_fname_las[[1]][1],
"_",
split_fname_las[[1]][2],
"-vgrid.shp")
tilename <<- gsub(".las", "", fname_las)
# READ THIS !!
# the operator <<- used to create and assign a global variable within a function
# see:  https://stackoverflow.com/questions/10904124/global-and-local-variables-in-r
fl_data <- st_read(paste0(aoidir, fn_flightline)) #
vg_data <- st_read(paste0(vgrdir, fn_vecgrid))
sel_tile <- fl_data %>% filter(TxtMemo == tilename) # select which tile
sel_grid <<- vg_data[sel_tile, op=st_within] # select the grid within sel_tile boundary
sel_grid$gridID <<- 1:nrow(sel_grid) # add ID for selection
grid01 = sel_grid %>% filter(gridID == 1) # select the first grid
pos <- raster::extent(grid01)
return(pos)
}
# read las
lasfname <-"/DATA/LIDAR GIZ/LAS (DSM)/PINDAHDATA/STAGE3/LINE_2_82.las"
line2.82 <- readLAS(lasfname)
lascheck(line2.82)
# filter duplicates
lasf <- lasfilterduplicates(line2.82)
lascheck(lasf)
# normalization
## dtm creation
dtm <- grid_terrain(lasf, res=0.5, algorithm = kriging(k=10L))
saveRDS(dtm, "PROCESSED_DATA/LINE_2_82/dtm.rds")
## normalize
ndsm <- lasnormalize(lasf, dtm)
saveRDS(ndsm, "PROCESSED_DATA/LINE_2_82/nDSM.rds")
saveRDS(lasf, "PROCESSED_DATA/LINE_2_82/lasf.rds")
# filter for narrow scan angle
narrowsca <- lasfilter(ndsm, ScanAngleRank >= -15, ScanAngleRank <= 15)
narrowsca <- lasfilter(narrowsca, Z >= 0)
coords <- calc_pos(lasfname)
saveRDS(narrowsca, "PROCESSED_DATA/LINE_2_82/narrowscan.rds")
resolution=30
mtr.nar <- grid_metrics(narrowsca,
sel_metrics(Z, htree=2.5, ReturnNumber, NumberOfReturns, Classification),
res=resolution,
start=c(coords[1], coords[3]))
names(mtr.nar) <- c("naARCI", "naFRCI", "naITY")
names(mtr.nar)
names(mtr.nar) <- c("naARCI", "naFRCI")
mtr.ori <- grid_metrics(ndsm,
sel_metrics(Z, htree=2.5, ReturnNumber, NumberOfReturns, Classification),
res=resolution,
start=c(coords[1], coords[3]))
mtr.sub <- mtr.nar$naFRCI - mtr.ori$FRCI
# center grid
centergrd <- st_centroid(sel_grid)
spgrd <- as(centergrd, "Spatial")
# stacking FRCI only
mtr.sta <- stack(mtr.nar$naFRCI, mtr.ori$FRCI)
# stacking ARCI only
mtr.arci <- stack(mtr.nar$naARCI, mtr.ori$ARCI)
# stacking ARCI dan FRCI
arci.frci <- stack(mtr.nar$naARCI, mtr.nar$naFRCI)
df.acci <- as.data.frame(arci.frci)
saveRDS(mtr.nar, "PROCESSED_DATA/LINE_2_82/CCindex_narrow_scanangle.rds")
saveRDS(mtr.ori, "PROCESSED_DATA/LINE_2_82/CCindex_ori_scanangle.rds")
# stacking FRCI only and save
mtr.sta <- stack(mtr.nar$naFRCI, mtr.ori$FRCI)
# stacking ARCI only
mtr.arci <- stack(mtr.nar$naARCI, mtr.ori$ARCI)
# ARCI vs FRCI
mtr.acci <- raster::extract(arci.frci, spgrd, sp = TRUE)
mtr.acci$diff <- mtr.acci$naARCI - mtr.acci$naFRCI
# raster based CC index ----
r_ndsm <- grid_canopy(ndsm, res = 0.5,
p2r(subcircle = 0.2, na.fill = kriging() ))
plot(r_ndsm)
r_ndsm
plot(r_ndsm, col = height.colors(40))
writeRaster(r_ndsm, "PROCESSED_DATA/LINE_2_82/raster_ndsm.tif",
overwrite = TRUE)
?p2r
# by
r_pfr <- grid_canopy(ndsm, res = 0.5, pitfree(c(0,2,5,10,15,20), c(0, 1.5)))
saveRDS(r_ndsm, "PROCESSED_DATA/LINE_2_82/raster_chm_p2r.rds")
writeRaster(r_ndsm, "PROCESSED_DATA/LINE_2_82/raster_chm_p2r.tif",
overwrite = TRUE)
saveRDS(r_pfr, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free.rds")
writeRaster(r_pfr, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free.tif",
overwrite = TRUE)
plot(r_pfr, col = height.colors(40))
# by pit2free algorithm v2
r_pfr2 <- grid_canopy(ndsm, res = 0.5,
pitfree(c(0,2,5,10,15,20), c(0, 1.5), subcircle = 0.2))
saveRDS(r_pfr2, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.rds")
writeRaster(r_pfr, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.tif",
overwrite = TRUE)
writeRaster(r_pfr, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free.tif",
overwrite = TRUE)
writeRaster(r_pfr, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free.tif",
overwrite = TRUE)
writeRaster(r_pfr2, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.tif",
overwrite = TRUE)
?focal
?writeRaster
?writeValues
?grid_canopy
?grid_canopy
?zonal
r_pfr2[r_pfr2 < 2.5] <- NA
plot(r_pfr2, col = height.colors(40))
npcl <- zonal(r_pfr2, mtr.ori$ARCI, fun = 'sum', na.rm = TRUE )
r_pfr2
mtr.ori
?crop
crop.pfr <- crop(r_pfr2, mtr.ori$ARCI)
plot(crop.pfr)
crop.pfr <- crop(r_pfr2, mtr.ori$ARCI, snap = 'out')
plot(crop.pfr)
crop.pfr
mtr.ori
crop.pfr <- crop(r_pfr2, mtr.ori$ARCI, snap = 'near')
crop.pfr
crop.pfr <- crop(r_pfr2, mtr.ori$ARCI, snap = 'in')
crop.pfr
crop.pfr <- crop(r_pfr2, mtr.ori$ARCI, snap = 'near')
crop.pfr
npcl <- zonal(crop.pfr, mtr.ori$ARCI, fun = 'sum', na.rm = TRUE )
?alignExtent
align.pfr <- alignExtent(mtr.ori, r_pfr2, snap = 'near')
align.pfr
class(align.pfr)
plot(align.pfr)
?merge
?raster::merge
merge.pfr <- merge(align.pfr, r_pfr2)
merge.pfr
merge.pfr <- merge(r_pfr2, align.pfr)
class(r_pfr2)
class(align.pfr)
?resample
?mask
mask.pfr <- mask(r_pfr2, mtr.ori)
library(lidR)
library(raster)
library(dplyr)
library(magrittr)
library(sf)
library(ggplot2)
library(rgdal)
sel_metrics = function(z, htree, rn, nr, cls)
{
vg <- (cls >= 3 & cls <= 5) # vegetation
# arci = all return canopy index
ar <- (z >= 0) # semua return
ac =  vg & (z >= htree) # return dari kanopi harus dari vegetasi dengan ketinggian minimal 2.5m (pengalaman field work di RMU)
arci = sum(ac) / sum(ar)
# FRCI = first return canopy index
sr <- (nr == 1) # single return when only 1 beam and 1 return )
fr <- (nr  > 1) & (rn == 1)  # frist return from many return
# frci'a denominator
fc <- fr & vg & (z >= htree)
sc <- sr & vg & (z >= htree)
frci = (sum(sc) + sum(fc)) / (sum(sr) + sum(fr))
# mean intensity from first return only
#mean_ity <- mean(ity)
# print(paste0("FRCI = ", frci))
# return all indexes
return(list(ARCI = arci, FRCI = frci))
}
calc_pos <- function(chunk_name)
{
aoidir <- "/DATA/LIDAR GIZ/AOI/"
vgrdir <- "/FORESTS2020/CODES/ForestCC/ANCILLARY/VGRID/"
split_chunk_name <- strsplit(chunk_name, "/")
fname_las <- split_chunk_name[[1]][length(split_chunk_name[[1]])]
split_fname_las <- strsplit(fname_las, "_")
fn_flightline <- paste0(split_fname_las[[1]][1],
"_",
split_fname_las[[1]][2],
".shp")
fn_vecgrid <- paste0(split_fname_las[[1]][1],
"_",
split_fname_las[[1]][2],
"-vgrid.shp")
tilename <<- gsub(".las", "", fname_las)
# READ THIS !!
# the operator <<- used to create and assign a global variable within a function
# see:  https://stackoverflow.com/questions/10904124/global-and-local-variables-in-r
fl_data <- st_read(paste0(aoidir, fn_flightline)) #
vg_data <- st_read(paste0(vgrdir, fn_vecgrid))
sel_tile <- fl_data %>% filter(TxtMemo == tilename) # select which tile
sel_grid <<- vg_data[sel_tile, op=st_within] # select the grid within sel_tile boundary
sel_grid$gridID <<- 1:nrow(sel_grid) # add ID for selection
grid01 = sel_grid %>% filter(gridID == 1) # select the first grid
pos <- raster::extent(grid01)
return(pos)
}
# read las
lasfname <-"/DATA/LIDAR GIZ/LAS (DSM)/PINDAHDATA/STAGE3/LINE_2_82.las"
line2.82 <- readLAS(lasfname)
lascheck(line2.82)
# filter duplicates
lasf <- lasfilterduplicates(line2.82)
lascheck(lasf)
dtm <- readRDS("PROCESSED_DATA/LINE_2_82/dtm.rds")
dtm
plot(dtm)
ndsm <- readRDS("PROCESSED_DATA/LINE_2_82/nDSM.rds")
mtr.ori <- readRDS("PROCESSED_DATA/LINE_2_82/CCindex_ori_scanangle.rds")
r_pfr2 <- readRDS("PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.rds")
plot(r_pfr2)
plot(mtr.ori, col = height.colors(40))
mtr.ori
r_pfr2
extent
extent(mtr.ori)
?resample
gdalUti
mtr.ori
projection(mtr.ori)
projection(r_pfr2
)
?crs
CRS("+init:epsg = 32748")
CRS("+init:epsg=32748")
CRS("+init=epsg:32748")
projection(mtr.ori) <- CRS("+init=epsg:32748")
mtr.ori
projection(r_pfr2) <- CRS("+init=epsg:32748")
saveRDS(mtr.ori, "PROCESSED_DATA/LINE_2_82/CCindex_ori_scanangle.rds")
saveRDS(r_pfr2, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.rds")
saveRDS(r_pfr2, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.rds")
writeRaster(r_pfr2, "PROCESSED_DATA/LINE_2_82/raster_chm_pit2free_disk.tif",
overwrite = TRUE)
npcl <- zonal(r_pfr2, mtr.ori$ARCI, fun = 'sum', na.rm = TRUE )
extent(r_pfr2)
?crop
crop.pfr <- crop(r_pfr2, extent(mtr.ori))
extent(crop.pfr)
crop.pfr <- crop(r_pfr2, extent(mtr.ori), snap = "near")
extent(crop.pfr)
mask.pfr <- mask(r_pfr2, mtr.ori)
?raster
res
res(r_pfr2)
nullgrids <- raster(res = res(r_pfr2), crs = CRS("+init=epsg:32748"),
extent(crop.pfr))
plot(nullgrids)
class(nullgrids)
nullgrids <- 1
plot(nullgrids)
nullgrids <- raster(res = res(r_pfr2), crs = CRS("+init=epsg:32748"),
ext = extent(crop.pfr))
plot(nullgrids)
extent(mtr.ori)
extent(mtr.ori)[1]
extent(mtr.ori)[2]
e_mtr.ori <- extent(mtr.ori)
nrows <- e_mtr.ori[4] - e_mtr.ori[3]
ncolumns <- e_mtr.ori[2] - e_mtr.ori[1]
ncolumns
nrowa
nrows
nkolom <- e_mtr.ori[2] - e_mtr.ori[1]
nbaris <- e_mtr.ori[4] - e_mtr.ori[3]
nullgrids <- raster(nrows = nbaris, ncols = nkolom, res(r_pfr2), crs = CRS("+init=epsg:32748"),
ext = extent(mtr.ori))
nullgrids <- raster(nrows = nbaris, ncols = nkolom, res(r_pfr2), crs = CRS("+init=epsg:32748"),
ext = extent(mtr.ori), values= TRUE)
nullgrids <- raster(nrows = nbaris, ncols = nkolom,
xmn = e_mtr.ori[1], xmx = e_mtr.ori[2],
res(r_pfr2), crs = CRS("+init=epsg:32748"))
nbaris
nkolom
nbaris <- e_mtr.ori[4] - e_mtr.ori[3]
nkolom <- e_mtr.ori[2] - e_mtr.ori[1]
extent(mtr.ori)
9768205-9767635
r1 <- raster(nrows=108, ncols=21, xmn=0, xmx=10)
nullgrids <- raster(nrows = nbaris, ncols = nkolom,
xmn = e_mtr.ori[1], xmx = e_mtr.ori[2])
nullgrids <- raster(nrows = nbaris, ncols = nkolom,
xmn = e_mtr.ori[1], xmx = e_mtr.ori[2], ext = extent(mtr.ori))
plot(nullgrids)
nullgrids <- raster(nrows = nbaris, ncols = nkolom,
xmn = e_mtr.ori[1], xmx = e_mtr.ori[2],
ext = extent(mtr.ori), crs = CRS("+init=epsg:32748"))
plot(nullgrids)
?merge
merge(r_pfr2, nullgrids)
res(r_pfr2)
nullgrids <- raster(nrows = nbaris, ncols = nkolom,
xmn = e_mtr.ori[1], xmx = e_mtr.ori[2],
ext = extent(mtr.ori), crs = CRS("+init=epsg:32748"),
resolution = res(r_pfr2))
merge(r_pfr2, nullgrids)
merge(r_pfr2, nullgrids) %>% plot
merge(r_pfr2, nullgrids) %>% extent
m_pfr2 <- merge(r_pfr2, nullgrids)
npcl <- zonal(m_pfr2, mtr.ori, fun = 'sum', na.rm = TRUE )
npcl <- zonal(m_pfr2, mtr.ori$ARCI, fun = 'sum', na.rm = TRUE )
extent(mtr.ori)
extent(mtr.ori$ARCI)
class(mtr.ori$ARCI)
extent(m_pfr2)
plot(mtr.ori$ARCI, add= TRUE)
tile282 <- readOGR("/DATA/LIDAR GIZ/AOITILE/Tile_2_82_vgrid.shp")
extract(r_pfr2, tile282, fun=function(x) length(x))
extract(r_pfr2, tile282, fun=function(x) length(x), sp = TRUE, na.rm = TRUE)
extract(r_pfr2, tile282, fun = function(x) { length(x)}, sp = TRUE, na.rm = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282, fun = function(x) { length(x)}, sp = TRUE, na.rm = TRUE)
tile282
xtr_pfr2 <- raster::extract(r_pfr2, tile282, fun = function(x) { length(x)}, sp = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282, fun = length(x), sp = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282, fun = function(x, ...) { length(x)}, sp = TRUE)
plot(xtr_pfr2)
writeOGR(xtr_pfr2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly.shp",
layer = extract_numpix_by_poly,
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
writeOGR(xtr_pfr2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly.shp",
layer = "extract_numpix_by_poly",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282,
fun = function(x, ...) {
validpix <- x[!is.na()]
return(sum(validpix))},
sp = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282,
fun = function(x, ...) {
validpix <- x[!is.na(x)]
return(sum(validpix))},
sp = TRUE)
xtr_pfr2 <- raster::extract(r_pfr2, tile282,
fun = function(x, ...) {
validpix <- x[!is.na(x)]
return(sum(validpix))},
sp = TRUE)
writeOGR(xtr_pfr2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly.shp",
layer = "extract_numpix_by_poly",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
xxx <- c(1, 0, 3, NA, NA)
length(xxx)
xxx[is.na(xxx)]
xxx[!is.na(xxx)]
30/0.5
60*60
xxx[xxx>0]
xxx[xxx > 0]
xxx[!is.na(xxx)]
xxx > 2.5
is.na(xxx)
!is.na(xxx)
xtr_pfr2 <- raster::extract(r_pfr2, tile282,
fun = function(x, ...) {
notNA = !is.na(x)
hGT2.5 = x > 2.5
nvalid = sum(notNA & hGT2.5)
CCidx  = nvalid / 3600 # 60 x 60 cells
return(CCidx)},
sp = TRUE)
writeOGR(xtr_pfr2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly.shp",
layer = "extract_numpix_by_poly",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
centergr
centergrd
lasfname
# calculate pcl-based CC index ----
coords <- calc_pos(lasfname)
sel_grid
plot(sel_grid)
plot(sel_grid["layer"])
xtr_pfr2 <- raster::extract(r_pfr2, sel_grid,
fun = function(x, ...) {
notNA = !is.na(x)
hGT2.5 = x > 2.5
nvalid = sum(notNA & hGT2.5)
CCidx  = nvalid / 3600 # 60 x 60 cells
return(CCidx)},
sp = TRUE)
writeOGR(xtr_pfr2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly.shp",
layer = "extract_numpix_by_poly",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
arci.frci
mtr
mtr.all
mtr.nar <- readRDS("PROCESSED_DATA/LINE_2_82/CCindex_narrow_scanangle.rds")
projection(mtr.ori)
projection(mtr.nar)
projection(mtr.nar) <- CRS("+init=epsg:32748")
saveRDS(mtr.nar, "PROCESSED_DATA/LINE_2_82/CCindex_narrow_scanangle.rds")
# center grid
# sel_grid was created in a
centergrd <- st_centroid(sel_grid)
spgrd <- as(centergrd, "Spatial")
# stacking all
mtr.all <- stack(mtr.nar, mtr.ori)
names(mtr.all)
writeRaster(mtr.all, "PROCESSED_DATA/metric_scan_angle_effect.tif",
overwrite = TRUE)
writeRaster(mtr.all, "PROCESSED_DATA/metric_scan_angle_effect_all_layers.tif",
overwrite = TRUE)
xtr_pfr2.2 <- raster::extract(mtr.all, xtr_pfr2)
names(xtr_pfr2.2)
names(xtr_pfr2.2@data)
class(mtr.all)
head(mtr.all)
xtr_pfr2.2 <- raster::extract(mtr.all, xtr_pfr2, sp = TRUE)
class(xtr_pfr2.2)
?easter::extract
?raster::extract
sf.xtr_pfr2 <- st_centroid(xtr_pfr2)
class(xtr_pfr2)
sf.xtr_pfr2 <- st_centroid(xtr_pfr2)
?st_centroid
xtr_pfr2.2 <- raster::extract(mtr.all, spgrd, sp = TRUE)
class(xtr_pfr2.2)
pts.mtr.all <- raster::extract(mtr.all, spgrd, sp = TRUE)
xtr_pfr2.2 <- st_join(pts.mtr.all, xtr_pfr2, join = st_intersects)
?over
xtr_pfr2.2 <- sp::over(pts.mtr.all, xtr_pfr2)
names(xtr_pfr2.2)
names(pts.mtr.all)
names(xtr_pfr2)
xtr_pfr2.2 <- sp::over(pts.mtr.all[], xtr_pfr2)
names(xtr_pfr2.2)
xtr_pfr2.2 <- st_join(st_as_sf(pts.mtr.all), st_as_sf(xtr_pfr2))
names(xtr_pfr2.2)
writeOGR(xtr_pfr2.2, dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly_v2.shp",
layer = "extract_numpix_by_poly_v2",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
writeOGR(as(xtr_pfr2.2, "Spatial"), dsn = "PROCESSED_DATA/LINE_2_82/extract_numpix_by_poly_v2.shp",
layer = "extract_numpix_by_poly_v2",
driver = "ESRI Shapefile",
overwrite_layer = TRUE)
# plotting
xtr_pfr2.2 <- xtr_pfr2.2[order(xtr_pfr2.2$naARCI),]
xtr_pfr2.2$sortID <- 1:nrow(xtr_pfr2.2)
ggplot(xtr_pfr2.2, aes(x=sortID)) +
geom_line(aes(y = naFRCI, colour = "naFRCI")) +
geom_line(aes(y = naARCI, colour = "naARCI")) +
geom_line(aes(y = Z, colour = "chmCCi")) +
#geom_point(aes(y=naFRCI)) + geom_point(aes(y=naARCI)) +
scale_color_manual(values = c("red", "black", "blue")) +
ylab("CC Index") + xlab("obs.index")
# stacking ARCI dan FRCI
arci.frci <- stack(mtr.nar$naARCI, mtr.nar$naFRCI)
df.acci <- as.data.frame(arci.frci)
df.acci <- df.acci[order(df.acci$naARCI), ]
df.acci$sortID <- 1:nrow(df.acci)
ggplot(df.acci, aes(x=sortID)) + geom_line(aes(y = naFRCI, colour = "naFRCI")) +
geom_line(aes(y = naARCI, colour = "naARCI")) +
#geom_point(aes(y=naFRCI)) + geom_point(aes(y=naARCI)) +
scale_color_manual(values = c("red", "black")) + ylab("CC Index") + xlab("obs.index")
dplyr::filter(df.acci, naFRCI == 1, sortID < 50)
dplyr::filter(xtr_pfr2.2, naFRCI == 1)
dplyr::filter(xtr_pfr2.2, naFRCI> 0.5)
head(df.acci, 30)
head(xtr_pfr2.2, 30)
nrow(df.acc)
nrow(df.acci)
nrow(xtr_pfr2.2)
dplyr::filter(xtr_pfr2.2, Z < 0.52, sortID < 30)
dplyr::filter(xtr_pfr2.2, Z < 0.52 & Z > 0.5, sortID < 30)
dplyr::filter(xtr_pfr2.2, Z < 0.52 & Z > 0.5, naFRCI > 0.6, sortID < 30)
dplyr::filter(xtr_pfr2.2, Z < 0.52 & Z > 0.5, naFRCI > 0.55, sortID < 30)
summary(cars)
summary(cars)
```{r}
summary(cars)
plot(cars)
ls()
library(lidR)
