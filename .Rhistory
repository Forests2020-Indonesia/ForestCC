# print("xxxx")
}
else {
# print("oooo")
# print(crs(sf_whole))
# print(crs(sf_obj))
print(sf_whole)
sf_whole <- rbind(sf_whole, sf_obj)
print("xxxxxxx")}
}
sf_whole <<- tryCatch(rm(sf_whole), error = function(cond) return(NULL))
sapply(shpmetrics, FUN = sf_bind)
sf_whole
a <- read_sf(paste0(dimetric, LINE_2_37-metrics.shp))
a <- read_sf(paste0(dirmetric, LINE_2_37-metrics.shp))
a <- read_sf(paste0(dirmetric, "LINE_2_37-metrics.shp"))
b <- read_sf(paste0(dirmetric, "LINE_8_11-metrics.shp"))
rbind(a,b)
c <- rbind(NULL, a)
rbind(c, b)
sf_bind <- function(fname)
{
sf_obj <- read_sf(fname)
# print(crs(sf_obj))
if(is.null(sf_whole)) {
sf_whole <- sf_obj
# print(sf_whole)
# print(crs(sf_whole))
# print("xxxx")
}
else {
# print("oooo")
# print(crs(sf_whole))
# print(crs(sf_obj))
print(sf_whole)
sf_whole <- rbind(sf_whole, sf_obj)
print("xxxxxxx")}
}
sf_whole <<- tryCatch(rm(sf_whole), error = function(cond) return(NULL))
sf_whole
sf_whole <<- tryCatch(rm(sf_whole), error = function(cond) return(NULL))
crs(sf_whole)
sf_whole <<- tryCatch(rm(sf_whole), error = function(cond) return(NULL))
sapply(shpmetrics, FUN = sf_bind)
sf_whole
shpmetrics
sf_whole <- lapply(shpmetrics, FUN = function(x) { sf_obj = read_sf(x); return(sf_obj))
sf_whole <- lapply(shpmetrics, FUN = function(x) { sf_obj = read_sf(x); return(sf_obj)})
sf_whole
sfw <- do.call(rbind, sf_whole)
sfw
sf_whole
lst_metrics <- lapply(shpmetrics,
FUN = function(x) { sf_obj = read_sf(x); return(sf_obj)})
sel_metrics <- do.call(rbind, lst_metrics)
rm(sf_whole)
ls()
names(sel_metric)
names(sel_metrics)
names(sel_metrics)[4] <- "LC_Lidar"
lc_klhk <- read_sf(paste0(dirthemes, "adm_wil_sumsel_utm48S-crs32748.shp"))
names(lc_klhl)
names(lc_klhk)
lc_klhk <- read_sf(paste0(dirthemes, "pl_2015-2016_sumsel_utm48S.shp"))
names(lc_klhk)
head(lc_klhk)
sel_metrics <- st_join(sel_metrics, dplyr::select(lc_klhk, PL__2015))
names(sel_metrics)
sel_metrics <- do.call(rbind, lst_metrics)
names(sel_metrics)[4] <- "LC_Lidar"
sel_metrics <- st_join(sel_metrics, dplyr::select(lc_klhk, PL__2015, PL__2016))
# embedding raster data
lst_tifs <- list.files(dirimages, pattern = glob2rx("*.tif"), full.names = TRUE)
lst_tifs
library (magrittr)
lst_tifs %<>% strsplit(lst_tifs, "/")[[1]][3] %>% strsplit(., ".")[[1]][1]
strsplit(lst_tifs, "/")
unlist(strsplit(lst_tifs, "/"))
class(unlist(strsplit(lst_tifs, "/")))
unlist(strsplit(lst_tifs, "/"))[1,3]
unlist(strsplit(lst_tifs, "/"))[[1]]
unlist(strsplit(lst_tifs, "/"))[[1]][3]
unlist(strsplit(lst_tifs, "/"))[,3]
unlist(strsplit(lst_tifs, "/"))[1]
unlist(strsplit(lst_tifs, "/"))[2]
lst_tifs
strsplit(lst_tifs, "/")[[]][3]
unlist(strsplit(lst_tifs, "/"))
test <- unlist(strsplit(lst_tifs, "/"))
str(test)
strsplit(lst_tifs, "/")[[1]][3] %>%
do.call(rbind,.)
strsplit(lst_tifs, "/") %>%
do.call(rbind,.)
test <- strsplit(lst_tifs, "/") %>%
do.call(rbind,.)
class(test)
strsplit(lst_tifs, "/")
test <- strsplit(lst_tifs, "/") %>% lapply(., FUN = function(x) strsplit(x, "."))
test
test <- strsplit(lst_tifs, "/") %>%
lapply(., FUN = function(x) strsplit(x[3], "."))
test
strsplit(lst_tifs, "/")
strsplit(lst_tifs, "/") %>%
lapply(., FUN = function(x) print(x))
strsplit(lst_tifs, "/") %>%
do.call(rbind,.)
strsplit(lst_tifs, "/")
test <- strsplit(lst_tifs, "/")
test
test[[1]]
test[[1]][3]
lst_tifs
sapply(lst_tifs, FUN=function(x) strsplit(x, "/")[3])
sapply(lst_tifs, FUN=function(x) strsplit(x, "/"))
sapply(lst_tifs, FUN=function(x) strsplit(x, "/"))
sapply(lst_tifs, FUN=function(x) strsplit(x, "/"))
sapply(lst_tifs, FUN=function(x) strsplit(x, "/")) %>%
lapply(., FUN = function(x) print(x[3]))
sapply(lst_tifs, FUN=function(x) strsplit(x, "/")) %>%
lapply(., FUN = function(x) print(x[3])) %>% unlist
sapply(lst_tifs, FUN=function(x) strsplit(x, "/")) %>%
lapply(., FUN = function(x) return(x[3])) %>% unlist
sapply(lst_tifs, FUN=function(x) strsplit(x, "/")) %>%
lapply(., FUN = function(x) return(x[3])) -> test
test
sapply(lst_tifs, FUN=function(x) strsplit(x, "/")) %>%
lapply(., FUN = function(x) return(x[3])) %>% unlist -> test
test
class(test)
str(test)
?unlist
sapply(lst_tifs, FUN=function(x) strsplit(x, "/")) %>%
lapply(., FUN = function(x) return(x[3])) %>% unlist(use.names = FALSE) -> test
test
sapply(lst_tifs, FUN=function(x) strsplit(x, "/")) %>%
lapply(., FUN = function(x) return(x[3])) %>%
unlist(use.names = FALSE) -> chr_tifs
chr_tifs
assign("ccc", 1)
ccc
lst_tifs
length(dirimages)
nchar(dirimages)
environment()
?assign
?ls
ls(envir = R_GlobalEnv)
ls(envir = .GlobalEnv)
open_tif <- function(chr_tif)
{
tif <- raster(chr_tif)
assign(x = paste0(substr(chr_tif, nchar(dirimages) + 1, nchar(chr_tif))),
value = tif,
envir = .GlobalEnv)
}
ls()
sapply(lst_tifs, FUN = open_tif)
open_tif <- function(chr_tif)
{
tif <- raster(chr_tif)
assign(x = paste0(substr(chr_tif, nchar(dirimages) + 1, nchar(chr_tif)-4)),
value = tif,
envir = .GlobalEnv)
}
sapply(lst_tifs, FUN = open_tif)
ls()
RasterObj <- c("RasterLayer", "RasterStack", "RasterBrick")
ram_tif <- sapply(ls(), FUN = function(x) if(class(get(x)) %in% RasterObj) return(x))
ram_tif
lst_tifs
ram_tif <- lapply(ls(), FUN = function(x) if(class(get(x)) %in% RasterObj) return(x))
ram_tif <- lapply(ls(), FUN = function(x) if(RasterObj %in% class(get(x))) return(x))
ram_tif
ram_tif <- sapply(ls(), FUN = function(x) if(RasterObj %in% class(get(x))) return(x))
?sapply
ram_tif <- sapply(ls(), FUN = function(x) {if(RasterObj %in% class(get(x))) return(x)})
ls()
class(a)
class(class(a))
class(a)[1]
ram_tif <- sapply(ls(), FUN = function(x) if(RasterObj %in% class(get(x))[1]) return(x))
ram_tif <- sapply(ls(), FUN = function(x) if(class(get(x))[1] %in% RasterObj) return(x))
ram_tif
lst_tifs
env_tif <- sapply(lst_tifs, FUN = open_tif)
env_tof
env_tif
open_tif <- function(fname)
{
obj_brick <- raster(fname)
chr_tif = paste0(substr(fname, nchar(dirimages) + 1, nchar(fname)-4))
assign(x = chr_tif,
value = obj_brick,
envir = .GlobalEnv)
return(chr_tif)
}
env_tif <- sapply(lst_tifs, FUN = open_tif)
env_tif
env_tif <- sapply(lst_tifs, FUN = open_tif, USE.NAMES = FALSE)
ls()
env_tif
open_tifs <- function(fname)
{
obj_brick <- raster(fname)
chr_tif = paste0(substr(fname, nchar(dirimages) + 1, nchar(fname)-4))
assign(x = chr_tif,
value = obj_brick,
envir = .GlobalEnv)
return(chr_tif)
}
stack_tif <- do.call(raster::stack, list(env_tif))
env_tif
stack_tif <- do.call(stack, sapply(env_tif, FUN = function(x) get(x)))
ls_tif <- sapply(env_tif, FUN = function(x) get(x))
ls_tif
stack_tif <- do.call(stack, ls_tif)
?do.call
ls_tif <- stack(sapply(env_tif, FUN = function(x) get(x)))
ls_tif <- stack(sapply(env_tif, FUN = function(x) get(x)))
stack_tif <- stack(ls_tif)
stack_tif
ls()
lst_metrics
sel_metrics
ls()
shpmetrics
lst_metrics <- lapply(shpmetrics,
FUN = function(x) {
sf_obj = read_sf(x)
fname <- strsplit(x, "/")
fname <- gsub(".shp", "", fname[length(fname)])
sf_obj$tileID <- fname
return(sf_obj) }
)
sel_metrics <- do.call(rbind, lst_metrics)
names(sel_metrics)[4] <- "LC_Lidar"
sel_metrics
lst_metrics <- lapply(shpmetrics,
FUN = function(x) {
sf_obj = read_sf(x)
fname <- strsplit(x, "/")
print(fname)
fname <- gsub(".shp", "", fname[length(fname)])
sf_obj$tileID <- fname
return(sf_obj) }
)
lst_metrics <- lapply(shpmetrics,
FUN = function(x) {
sf_obj = read_sf(x)
fname <- strsplit(x, "/")
print(fname[length(fname)])
fname <- gsub(".shp", "", fname[length(fname)])
sf_obj$tileID <- fname
return(sf_obj) }
)
lst_metrics <- lapply(shpmetrics,
FUN = function(x) {
sf_obj = read_sf(x)
fname <- strsplit(x, "/")
print(fname[[1]][length(fname)])
fname <- gsub(".shp", "", fname[length(fname)])
sf_obj$tileID <- fname
return(sf_obj) }
)
test <- "df/asdf/asdf"
tsl <- strsplit(test, "/")
tsl
tsl[[1]]
tsl[[1]][3]
length(tsl)
length(tsl[[1]])
lst_metrics <- lapply(shpmetrics,
FUN = function(x) {
sf_obj = read_sf(x)
fname <- strsplit(x, "/")
print(fname[[1]][length(fname[[1]])])
fname <- gsub(".shp", "", fname[length(fname)])
sf_obj$tileID <- fname
return(sf_obj) }
)
sel_metrics <- do.call(rbind, lst_metrics)
names(sel_metrics)[4] <- "LC_Lidar"
sel_metrics
lst_metrics <- lapply(shpmetrics,
FUN = function(x) {
sf_obj = read_sf(x)
fname <- strsplit(x, "/")
print(fname[[1]][length(fname[[1]])])
fname <- gsub(".shp", "", fname[[1]][length(fname[[1]])])
sf_obj$tileID <- fname
return(sf_obj) }
)
sel_metrics <- do.call(rbind, lst_metrics)
names(sel_metrics)[4] <- "LC_Lidar"
sel_metrics
head(sel_metrics$tileID)
lst_metrics <- lapply(shpmetrics,
FUN = function(x) {
sf_obj = read_sf(x)
fname <- strsplit(x, "/")
print(fname[[1]][length(fname[[1]])])
fname <- gsub("-metrics.shp", "", fname[[1]][length(fname[[1]])])
sf_obj$tileID <- fname
return(sf_obj) }
)
sel_metrics <- do.call(rbind, lst_metrics)
names(sel_metrics)[4] <- "LC_Lidar"
sel_metrics
sp_sel_metrics <- as(sel_metrics, "Spatial")
?extract
?extract2
sel_extract <- raster::extract(stack_tif, sp_sel_metrics)
class(sel_extract)
head(sel_extract)
sel_metrics <- cbind(sel_metrics, as.data.frame(sel_extract))
as.data.frame(sel_extract)
sel_metrics <- do.call(rbind, lst_metrics)
names(sel_metrics)[4] <- "LC_Lidar"
sel_metrics
sel_metrics <- dplyr::bind_cols(sel_metrics, as.data.frame(sel_extract))
sel_metrics
library(glcm)
?glcm
Tb4M <- glcm(b4, statistics = "mean")
Tb5M <- glcm(b5, statistics = "mean")
Tb6M <- glcm(b6, statistics = "mean")
Tb7M <- glcm(b7, statistics = "mean")
Tb4V <- glcm(b4, statistics = "variance")
Tb5V <- glcm(b5, statistics = "variance")
Tb6V <- glcm(b6, statistics = "variance")
Tb7V <- glcm(b7, statistics = "variance")
RasterObj <- c("RasterLayer", "RasterStack", "RasterBrick")
# save only *Raster objects
save_raster_obj <- function(x)
{
if(class(get(x)) %in% RasterObj)
writeRaster(get(x), filename = paste0("PROCESSED_DATA/SEL_RASTER/",
x, ".tif"),
overwrite=TRUE)
}
sapply(ls(), FUN = save_raster_obj)
ls()
class(ndvi)
class(NDVI)
# save only *Raster objects
show_raster_obj <- function(x)
{
if(class(get(x)) %in% RasterObj)
print(x)
}
sapply(ls(), FUN = show_raster_obj)
rm(ls_tif)
rm(stack_tif)
# save only *Raster objects
show_raster_obj <- function(x)
{
if(class(get(x)) %in% RasterObj)
print(x)
return(NULL)
}
sapply(ls(), FUN = show_raster_obj)
# save only *Raster objects
show_raster_obj <- function(x)
{
if(class(get(x)) %in% RasterObj)
cat(x)
}
sapply(ls(), FUN = show_raster_obj)
# save only *Raster objects
show_raster_obj <- function(x)
{
if(class(get(x)) %in% RasterObj)
print(x)
}
sapply(ls(), FUN = show_raster_obj)
class(NBR) %in% RasterObj
class(TCA) %in% RasterObj
class(b2) %in% RasterObj
class(Tb4M2) %in% RasterObj
class(Tb4M) %in% RasterObj
class(Tb6M) %in% RasterObj
class(b)
class(b)[1]
class(Tb4M)[1]
sapply(ls(), FUN = show_raster_obj)
?sapply
sapply(ls(), FUN = save_raster_obj)
sapply(ls(), FUN = save_raster_obj)
save_raster_obj <- function(x)
{
if(class(get(x))[1] %in% RasterObj)
writeRaster(get(x), filename = paste0("/Forests2020/CODES/ForestCC/PROCESSED_DATA/SEL_RASTER/",
x, ".tif"),
overwrite=TRUE)
}
sapply(ls(), FUN = save_raster_obj)
# Tsseled Cap: Greenness, TCA, Wetness
library(raster)
library(sf)
sapply(ls(), FUN = save_raster_obj)
save_raster_obj <- function(x)
{
if(class(get(x))[1] %in% RasterObj)
writeRaster(get(x), filename = paste0("PROCESSED_DATA/SEL_RASTER/",
x, ".tif"),
overwrite=TRUE)
}
sapply(ls(), FUN = save_raster_obj)
getwd()
save_raster_obj <- function(x)
{
print(x)
if(class(get(x))[1] %in% RasterObj) {
print(paste0("PROCESSED_DATA/SEL_RASTER/", x, ".tif"))
writeRaster(get(x), filename = paste0("PROCESSED_DATA/SEL_RASTER/",
x, ".tif"),
overwrite=TRUE)
}
}
sapply(ls(), FUN = save_raster_obj)
get("Tb4M")
writeRaster(Tb4M, filename = "PROCESSED_DATA/SEL_RASTER/Tb4M.tif")
save_raster_obj <- function(x)
{
if(class(get(x))[1] %in% RasterObj) {
print(paste0("PROCESSED_DATA/SEL_RASTER/", x, ".tif"))
writeRaster(get(x), filename = paste0("PROCESSED_DATA/SEL_RASTER/",
x, ".tif"),
overwrite=TRUE)
}
}
sapply(ls(), FUN = save_raster_obj)
?writeRaster
writeRaster(get("Tb4M"), filename = "PROCESSED_DATA/SEL_RASTER/Tb4M.tif", overwrite=TRUE)
# save only *Raster objects
show_raster_obj <- function(x)
{
if(class(get(x)) %in% RasterObj)
{
print(x)
print(class(get(x)))
}
}
# save only *Raster objects
show_raster_obj <- function(x)
{
if(class(get(x)) %in% RasterObj)
{
print(x)
print(class(x))
print(class(get(x)))
}
}
sapply(ls(), FUN = show_raster_obj)
save_raster_obj <- function(x)
{
if(class(get(x))[1] %in% RasterObj) {
print(paste0("PROCESSED_DATA/SEL_RASTER/", x, ".tif"))
writeRaster(get(x),
filename = paste0("PROCESSED_DATA/SEL_RASTER/", x, ".tif"),
overwrite=TRUE)
}
}
sapply(ls(), FUN = save_raster_obj)
save_raster_obj <- function(x)
{
if(class(get(x))[1] %in% RasterObj) {
print(paste0("PROCESSED_DATA/SEL_RASTER/", x, ".tif"))
writeRaster(get(x),
filename = paste0("PROCESSED_DATA/SEL_RASTER/", x, ".tif"),
overwrite=TRUE)
}
}
sapply(ls(), FUN = save_raster_obj)
x = "b2"
writeRaster(get(x), filename = paste0("PROCESSED_DATA/SEL_RASTER/", x, ".tif"),
overwrite=TRUE)
class(x)
x
get(x)
paste0("PROCESSED_DATA/SEL_RASTER/", x, ".tif")
writeRaster(get(x), filename = paste0("PROCESSED_DATA/SEL_RASTER/", x, ".tif"),
overwrite=TRUE)
txt <- paste0("PROCESSED_DATA/SEL_RASTER/", x, ".tif")
writeRaster(get(x), filename = txt, overwrite=TRUE)
writeRaster(get(x), filename = "b2.tif", overwrite=TRUE)
?get
environment()
writeRaster(get(x), filename = "b2.tif", overwrite=TRUE, envir=.GlobalEnv)
get(x)
y <- get(x)
writeRaster(y, filename = "b2.tif", overwrite=TRUE)
writeRaster(b2, filename = "b2.tif", overwrite=TRUE)
b2
raster::writeRaster(get(x), filename = "b2.tif", overwrite=TRUE)
detach(package:raster)
library(rgdal)
?writeOGR
saveRDS(get(x), file = x)
get(x)
?get
x = "Tb4M"
txt <- paste0("PROCESSED_DATA/SEL_RASTER/", x, ".tif")
txt
writeRaster(get(x), filename = txt,  overwrite=TRUE)
Tb4M
class(Tb4M)
25 * 0,5
25 * 0.5
rm(list=ls())
