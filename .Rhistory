cc <- grid_metrics(las, func=CCIdx(Z, Classification), res=30)
cc
# turn CC into sf
cc_sf = cc %>% as.data.frame %>% st_as_sf(coords = c("X","Y"), crs=32748)
library(sf)
# turn CC into sf
cc_sf = cc %>% as.data.frame %>% st_as_sf(coords = c("X","Y"), crs=32748)
st_write(cc_sf, "PROCESSED_DATA/cc_sf.shp", delete_layer = TRUE)
# LiDAR metric ----
# all return
CCIdx <- function(z, cls)
{
# all point clouds (returns) which classified as vegetation
vg <- (cls >= 3) & (cls <= 5) & (z >= 2.5)
vg <- sum(vg)
# all return despite of their classification;
# use 'length' function because of z is a vector object
ar <- length(z)
return(list(arci = vg/ar)) # the output must be a "list" object, so it uses 'list' function
}
cc <- grid_metrics(las, func=CCIdx(Z, Classification), res=30)
cc
# turn CC into sf
cc_sf = cc %>% as.data.frame %>% st_as_sf(coords = c("X","Y"), crs=32748)
st_write(cc_sf, "PROCESSED_DATA/cc_sf.shp", delete_layer = TRUE)
library(lidR)
cat1 <- catalog("/DATA/LIDAR GAL/43043/43043.laz")
?lascheck
lascheck(cat1)
plot(cat1)
as.spatial(cat1)
cat1@input_options
cat1@data$File.Source.ID
cat1@Point.Data.Format.ID
cat1@data
cat1@data$filename
shp <- as.spatial(cat1)
?strsplit
strsplit(cat1@data$filename, "\\\\")
fn <- strsplit(cat1@data$filename, "\\\\")[[5]]
fn <- strsplit(cat1@data$filename, "\\\\")[[4]]
fn <- strsplit(cat1@data$filename, "\\\\")[5]
fn
fn <- strsplit(cat1@data$filename, "\\\\")[[1]][5]
fn
library(sf)
write_sf(shp, paste0("/DATA/LIDAR GAL/43043/", fn, ".shp")
)
st_write(shp, paste0("/DATA/LIDAR GAL/43043/", fn, ".shp"))
class(shp)
paste0("/DATA/LIDAR GAL/43043/", fn, ".shp")
?write_sf
shp %<>% st_as_sf(shp)
libraru(magrittr)
library(magrittr)
shp %<>% st_as_sf(shp)
write_sf(shp, paste0("/DATA/LIDAR GAL/43043/", fn, ".shp"))
cat1 <- catalog("/DATA/LIDAR GAL/43208/43028.laz")
plot(cat1)
shp <- as.spatial(cat1)
strsplit(cat1@data$filename, "\\\\")
fn <- strsplit(cat1@data$filename, "\\\\")[[1]][5]
write_sf(shp, paste0(cat1@data$filename, ".shp"))
cat1@data$filename
shp %<>% st_as_sf(shp)
write_sf(shp, paste0(cat1@data$filename, ".shp"))
ctg <- catalog("/DATA/LIDAR GAL/43308/43038.laz")
plot(ctg)
shp <- as.spatial(ctg)
strsplit(ctg@data$filename, "\\\\")
fn <- strsplit(ctg@data$filename, "\\\\")[[1]][5]
shp %<>% st_as_sf(shp)
write_sf(shp, paste0(ctg@data$filename, ".shp"))
ctg <- catalog("/DATA/LIDAR GAL/46009/46009.laz")
plot(ctg)
shp <- as.spatial(ctg)
strsplit(ctg@data$filename, "\\\\")
fn <- strsplit(ctg@data$filename, "\\\\")[[1]][5]
shp %<>% st_as_sf(shp)
write_sf(shp, paste0(ctg@data$filename, ".shp"))
ctg <- catalog("/DATA/LIDAR GAL/46027/46027.laz")
plot(ctg)
shp <- as.spatial(ctg)
strsplit(ctg@data$filename, "\\\\")
fn <- strsplit(ctg@data$filename, "\\\\")[[1]][5]
shp %<>% st_as_sf(shp)
write_sf(shp, paste0(ctg@data$filename, ".shp"))
ctg <- catalog("/DATA/LIDAR GAL/47035/47035.laz")
plot(ctg)
shp <- as.spatial(ctg)
strsplit(ctg@data$filename, "\\\\")
fn <- strsplit(ctg@data$filename, "\\\\")[[1]][5]
shp %<>% st_as_sf(shp)
write_sf(shp, paste0(ctg@data$filename, ".shp"))
ctg <- catalog("/DATA/LIDAR GAL/43208/43028.laz")
plot(ctg)
galmap <- read_sf("/DATA/TOPO SUMSEL/batas PT GAL-UTM.shp")
plot(st_geometry(galmap), add = TRUE)
plot(st_geometry(galmap))
plot(ctg, add = TRUE)
toupper()
toupper("asdfad")
ls()
ctg
26*6.5
ctg43208 <- catalog("/DATA/LIDAR GAL/Tiles_43208/")
plot(ctg43208)
rm(list=ls())
ctg43208 <- catalog("/DATA/LIDAR GAL/43208/")
opt_chunk_buffer(ctg43208) <- 0
opt_chunk_size(ctg43208)   <- 1000
opt_chunk_alignment(ctg43208) <- c(397000L, 9772000L) # WAJIB INTEGER !
opt_output_files(ctg43208) <- "/DATA/LIDAR GAL/L_43208/l_43208_{XLEFT}_{YBOTTOM}")
opt_output_files(ctg43208) <- "/DATA/LIDAR GAL/L_43208/l_43208_{XLEFT}_{YBOTTOM}"
opt_filter(ctg43208) <- "-drop_z_above 90"  # based on Google Earth DTM
newctg <-catalog_retile(ctg43208)
gc()
opt_cores(ctg43208) <- 4L
newctg <-catalog_retile(ctg43208)
library(lidR)
gc()
ctg
ctg43208
las <- readLAS("/DATA/LIDAR GAL/L_43208/l_43208_411000_9775000.las")
las
plot(las)
lascheck(las)
unique(las@data$Classification)
library(lidR)
read.csv("ANCILLARY/Selected LAS South Sumatra.csv")
listFiles <- read.csv("ANCILLARY/Selected LAS South Sumatra.csv")[,1]
listFiles
options(stringsAsFactors = FALSE)
listFiles <- read.csv("ANCILLARY/Selected LAS South Sumatra.csv")[,1]
listFiles
class(listFiles)
length(listFiles))
length(listFiles)
sapply(listFiles, print(x))
sapply(listFiles, FUN = print(x))
sapply(listFiles, FUN = print
)
sapply(listFiles, FUN = print)
sapply(listFiles, FUN = cat)
sapply(listFiles, FUN = print)
?sapply
y <- sapply(listFiles, FUN = print)
y
length(y)
ctgProcess = function(x)
{
print(x)
}
sapply(listFiles, FUN = ctgProcess)
?sapply
lapply(listFiles, FUN = ctgProcess)
sapply(listFiles, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
print(substr("LINE", "l", x))
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
print(substr("Line", "l", x))
ctgProcess = function(x)
{
print(substr("Line", "l", x))
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
sapply(listFiles, FUN = function(x) ctgProcess(x), simplify = F)
sapply(listFiles, FUN = ctgProcess, simplify = F)
warnings()
?substr
substr("Line_4_4", 1, 6)
spl <- strsplit(Line_40_4, "_")
spl <- strsplit("Line_40_4", "_")
spl
spl[1]
spl[[1]]
spl[[1]][1]
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2]
ctg <- catalog(paste(pPath, iLas))
lascheck(ctg)
print("---")
}
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
ctg <- catalog(paste(pPath, iLas))
lascheck(ctg)
print("---")
}
pPath <- "/DATA/LIDAR GIZ/LAS (DSM)/Point Cloud GIZ Buffer 10m/"
sapply(listFiles, FUN = ctgProcess, simplify = F)
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
iLas
listFiles
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
print(iLAS)
ctg <- catalog(paste(pPath, iLas))
lascheck(ctg)
print("---")
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
print(iLas)
ctg <- catalog(paste(pPath, iLas))
lascheck(ctg)
print("---")
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
print(iLas)
ctg <- catalog(paste(pPath, "/", iLas))
lascheck(ctg)
print("---")
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
paste(pPath, "/", iLas)
paste0(pPath, "//", iLas)
paste0(pPath, "/", iLas)
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
print(iLas)
ctg <- catalog(paste0(pPath, iLas))
lascheck(ctg)
print("---")
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
ls()
tstCat <- catalog("/DATA/LIDAR GIZ/LAS (DSM)/Point Cloud GIZ Buffer 10m/Line_4")
lascheck(tstCat)
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
print("spl \n")
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
print(iLas, "\n")
ctg <- catalog(toupper(paste0(pPath, iLas)))
lascheck(ctg)
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
writeLines("spl \n")
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
writeLines(iLas, "\n")
ctg <- catalog(toupper(paste0(pPath, iLas)))
lascheck(ctg)
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
cat(spl)
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
cat(iLas)
ctg <- catalog(toupper(paste0(pPath, iLas)))
lascheck(ctg)
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
print(spl)
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
cat(iLas)
ctg <- catalog(toupper(paste0(pPath, iLas)))
lascheck(ctg)
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
print(spl)
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
cat(iLas)
ctg <- catalog(toupper(paste0(pPath, iLas)))
lascheck(ctg)
cat()
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
spl <- strsplit(x, "_")
print(spl)
iLas <- paste0(spl[[1]][1], "_", spl[[1]][2])
cat("iLas: ", iLas)
ctg <- catalog(toupper(paste0(pPath, iLas)))
lascheck(ctg)
cat()
}
sapply(listFiles, FUN = ctgProcess, simplify = F)
listFiles
spl <- strsplit(listFiles, "_")
print(spl)
listFolds <- paste0(spl[[1]][1], "_", spl[[1]][2])
listFolds
listFolds <- paste0(spl[[]][1], "_", spl[[]][2])
listFolds
spl[1]
spl[[1]]
spl[[2]]
spl[[]]
spl
unlist(spl)
listFolds <- unlist(spl[[]])
unlist(spl[[]])
strsplit(listFiles, "_")
lapply(spl, function(x) paste0(x[[1]][1], "_", x[[1]][2]))
spl <- strsplit(listFiles, "_")
spl
lapply(spl, function(x) paste0(x[[1]][1], "_", x[[1]][2]))
lapply(spl, function(x) print(x))
sapply(spl, function(x) print(x))
sapply(spl, function(x) paste0(x[[1]][1], "_", x[[1]][2]))
sapply(spl, function(x) paste0(x[1], "_", x[2]))
listFolds <- unique(listFolds)
listFolds
listFolds <- sapply(spl, function(x) paste0(x[1], "_", x[2]))
class(listFolds)
levels(listFolds)
base::unique(listFolds)
listFolds <- base::unique(listFolds)
pPath <- "/DATA/LIDAR GIZ/LAS (DSM)/Point Cloud GIZ Buffer 10m/"
listFolds <- tolower(base::unique(listFolds))
listFolds
ctgProcess = function(x)
{
ctg <- catalog(paste0(pPath, iLas))
lascheck(ctg)
cat()
}
sapply(listFolds, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
ctg <- catalog(paste0(pPath, x))
lascheck(ctg)
}
cat()
sapply(listFolds, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
cat(x)
ctg <- catalog(paste0(pPath, x))
lascheck(ctg)
}
sapply(listFolds, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
cat(x)
ctg <- catalog(paste0(pPath, x))
lascheck(ctg)
cat("")
}
sapply(listFolds, FUN = ctgProcess, simplify = F)
ctgProcess = function(x)
{
cat(x)
ctg <- catalog(paste0(pPath, x))
lascheck(ctg)
}
sapply(listFolds, FUN = ctgProcess, simplify = F)
lapply(listFolds, FUN = ctgProcess, simplify = F)
lapply(listFolds, FUN = ctgProcess)
ctgProcess = function(x)
{
writeLines(x)
ctg <- catalog(paste0(pPath, x))
lascheck(ctg)
}
lapply(listFolds, FUN = ctgProcess)
listFiles <- read.csv("ANCILLARY/Selected LAS South Sumatra.csv")[,1]
listFiles
library(dplyr)
listFiles
as_tibble(read.csv("ANCILLARY/Selected LAS South Sumatra.csv"))
listFiles <- read.csv("ANCILLARY/Selected LAS South Sumatra.csv")[,1]
spl <- strsplit(listFiles, "_")
listFolds <- sapply(spl, function(x) paste0(x[1], "_", x[2]))
listFolds <- tolower(base::unique(listFolds))
listFolds
pPath <- "/DATA/LIDAR GIZ/LAS (DSM)/Point Cloud GIZ Buffer 10m/"
pPath
paste0("/")
listFolds <- tolower(base::unique(listFolds))
?readLAS
writeLines("")
ls()
y
ilas
iLas
las <- readLAS("/DATA/LIDAR GIZ/LAS (DSM)/Point Cloud GIZ Buffer 10m/line_1/LINE_1_1.las")
print(min(las@data$Z))
print("MinZ: "min(las@data$Z), "- MaxZ: ", max(las@data$Z))
print("MinZ: ", min(las@data$Z), "- MaxZ: ", max(las@data$Z))
cat("MinZ: ", min(las@data$Z), "- MaxZ: ", max(las@data$Z))
cat("MinZ: ", min(las@data$Z), " MaxZ: ", max(las@data$Z))
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
chkLas = function(fname)
{
spl <- strsplit(fname, "_")
foldpath <- sapply(spl, function(x) paste0(x[1], "_", x[2]))
foldpath <- tolower(base::unique(foldpath))
las <- readLAS(paste0(pPath, foldpath, "/", fname, ".las"),
filter = "-drop_z_below 0" )
if(is.empty(las)) return(NULL)
writeLines("")
# lascheck
lascheck(las)
# print las info
writeLines("")
print(las)
# classification
unique(las@data$Classification)
table(las@data$Classification)
# height
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
hist(las@data$Z)
writeLines("")
}
sapply(listFiles, FUN = chkLas)
lasf?hist
?hist
chkLas = function(fname)
{
spl <- strsplit(fname, "_")
foldpath <- sapply(spl, function(x) paste0(x[1], "_", x[2]))
foldpath <- tolower(base::unique(foldpath))
las <- readLAS(paste0(pPath, foldpath, "/", fname, ".las"),
filter = "-drop_z_below 0" )
if(is.empty(las)) return(NULL)
# lascheck
writeLines("")
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
unique(las@data$Classification)
table(las@data$Classification)
# height
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
base::hist(las@data$Z, main=fname)
writeLines("\n")
}
sapply(listFiles, FUN = chkLas)
?hist
chkLas = function(fname)
{
spl <- strsplit(fname, "_")
foldpath <- sapply(spl, function(x) paste0(x[1], "_", x[2]))
foldpath <- tolower(base::unique(foldpath))
las <- readLAS(paste0(pPath, foldpath, "/", fname, ".las"),
filter = "-drop_z_below 0" )
if(is.empty(las)) return(NULL)
writeLines("")
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
unique(las@data$Classification)
table(las@data$Classification)
# height
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
sapply(listFiles, FUN = chkLas)
sapply(listFiles, FUN = chkLas)
chkLas = function(fname)
{
spl <- strsplit(fname, "_")
foldpath <- sapply(spl, function(x) paste0(x[1], "_", x[2]))
foldpath <- tolower(base::unique(foldpath))
las <- readLAS(paste0(pPath, foldpath, "/", fname, ".las"),
filter = "-drop_z_below 0" )
if(is.empty(las)) return(NULL)
writeLines("\n")
cat(fname)
# lascheck
lascheck(las)
# print las info
writeLines("\n")
print(las)
# classification
unique(las@data$Classification)
table(las@data$Classification)
# height
cat("MinZ:", min(las@data$Z), " MaxZ:", max(las@data$Z))
graphics::hist(las@data$Z, main=fname, breaks=15)
writeLines("\n")
}
sapply(listFiles, FUN = chkLas)
options(digits = 22)
