#
# return(las)
}
newctg = catalog_apply(ctg, mkDTM)
# define function ----
mkDTM <- function(chunk)
{
las <- readLAS(chunk)
fsave <- chunk@save
lst <- strsplit(fsave, "/")
fdtm <- paste0(gsub(lst[[1]][2], "SEL_DTM", fsave), ".tif")
print(fdtm)
if(is.empty(las)) return(NULL)
# lasnormalized
# dtm <- grid_terrain(las, res=0.5, algorithm=kriging(k=10L))
# lst <- strsplit(chunk@save)
# gsub(lst[[1]][2], "SEL_DTM", )
# writeRaster(dtm, paste0("PROCESSED_DATA/SEL_DTM/"))
#
# las <- lasnormalize(las, dtm)
#
# return(las)
}
newctg = catalog_apply(ctg, mkDTM)
ctg <- catalog("PROCESSED_DATA/CTG_SINGLE/")
opt_output_files(ctg) <- paste0("PROCESSED_DATA/SEL_NORM/{ORIGINALFILENAME}")
# define function ----
mkDTM <- function(chunk)
{
las <- readLAS(chunk)
fsave <- chunk@save
lst <- strsplit(fsave, "/")
fdtm <- paste0(gsub(lst[[1]][2], "SEL_DTM", fsave), ".tif")
print(fdtm)
if(is.empty(las)) return(NULL)
# lasnormalized
# dtm <- grid_terrain(las, res=0.5, algorithm=kriging(k=10L))
# lst <- strsplit(chunk@save)
# gsub(lst[[1]][2], "SEL_DTM", )
# writeRaster(dtm, paste0("PROCESSED_DATA/SEL_DTM/"))
#
# las <- lasnormalize(las, dtm)
#
# return(las)
}
newctg = catalog_apply(ctg, mkDTM)
?writeRASTER
?writeRaster
# define function ----
mkDTM <- function(chunk)
{
las <- readLAS(chunk)
if(is.empty(las)) return(NULL)
lst <- strsplit(chunk@save, "/")
fdtm <- paste0(gsub(lst[[1]][2], "SEL_DTM", chunk@save), ".tif")
# dtm
dtm <- grid_terrain(las, res=0.25, algorithm=kriging(k=10L))
writeRaster(dtm, filename=fdtm, overwrite=TRUE)
# lasnormalize
las <- lasnormalize(las, dtm)
return(las)
}
newctg = catalog_apply(ctg, mkDTM)
# define function ----
mkDTM <- function(chunk)
{
las <- readLAS(chunk)
if(is.empty(las)) return(NULL)
lst <- strsplit(chunk@save, "/")
fdtm <- paste0(gsub(lst[[1]][2], "SEL_DTM", chunk@save), ".tif")
# dtm
dtm <- grid_terrain(las, res=0.25, algorithm=kriging(k=50L))
crs(dtm) <- CRS("+init=epsg:32748")
writeRaster(dtm, filename=fdtm, overwrite=TRUE)
# lasnormalize
las <- lasnormalize(las, dtm)
return(las)
}
newctg = catalog_apply(ctg, mkDTM)
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST/")
rm(list=ls())
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
ctg <- catalog("PROCESSED_DATA/LAS_FOR_TEST/")
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 4
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
# define function ----
mkDTM <- function(chunk)
{
las <- readLAS(chunk)
if(is.empty(las)) return(NULL)
lst <- strsplit(chunk@save, "/")
fdtm <- paste0(gsub(lst[[1]][2], "SEL_DTM", chunk@save), ".tif")
# dtm
dtm <- grid_terrain(las, res=0.25, algorithm=kriging(k=50L))
crs(dtm) <- CRS("+init=epsg:32748")
writeRaster(dtm, filename=fdtm, overwrite=TRUE)
# lasnormalize
las <- lasnormalize(las, dtm)
return(las)
}
gc()
?grid_canopy
ctg <- catalog("PROCESSED_DATA/CTG_SINGLE/")
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 1
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
library(lidR)
l <- readLAS("PROCESSED_DATA/SEL_NORM/")
l <- readLAS("PROCESSED_DATA/SEL_NORM/LINE_8_1.las")
l
plot(l)
hist(l@data$Z)
rm(l)
lraw <- readLAS("PROCESSED_DATA/LAS_FOR_TEST/LINE_8_1.las")
lraw
plot(lraw)
l <- readLAS("PROCESSED_DATA/SEL_NORM/LINE_8_1.las")
rm(l)
lraw <- readLAS("PROCESSED_DATA/LAS_FOR_TEST/LINE_8_1.las")
lraw
hist(lraw)
hist(lraw@data$Z)
summary(lraw@data$Z)
summary(l@data$Z)
l <- readLAS("PROCESSED_DATA/SEL_NORM/LINE_8_1.las")
summary(l@data$Z)
hist(l@data$Z, 100)
hist(lraw@data$Z, 100)
nrow(filter(lraw@data, Z > 500))
nrow(dplyr::filter(lraw@data, Z > 500))
nrow(dplyr::filter(lraw@data, Z > 200))
nrow(dplyr::filter(lraw@data, Z > 100))
nrow(dplyr::filter(lraw@data, Z > 600))
nrow(dplyr::filter(lraw@data, Z > 80))
nrow(dplyr::filter(lraw@data, Z > 60))
nrow(dplyr::filter(lraw@data, Z > 30))
nrow(dplyr::filter(lraw@data, Z > 10))
?grid_terrain
rm(list=ls())
ctg <- catalog("PROCESSED_DATA/CTG_SINGLE/")
opt_chunk_buffer(ctg) <- 0
opt_chunk_size(ctg)   <- 0
opt_cores(ctg) <- 1
opt_output_files(ctg) <- paste0("PROCESSED_DATA/CTG_OUT/{ORIGINALFILENAME}")
# define function ----
mkDTM <- function(chunk)
{
las <- readLAS(chunk)
if(is.empty(las)) return(NULL)
lst <- strsplit(chunk@save, "/")
fdtm <- paste0(gsub(lst[[1]][2], "CTG_DTM", chunk@save), ".tif")
# dtm
dtm <- grid_terrain(las, res=0.25, algorithm=kriging(k=50L), keep_lowest=TRUE) # 5- pts as an average of pts available in 9 grid of 1 m x 1m grid
crs(dtm) <- CRS("+init=epsg:32748")
writeRaster(dtm, filename=fdtm, overwrite=TRUE)
# lasnormalize
las <- lasnormalize(las, dtm)
# return las from above
return(las)
}
newctg = catalog_apply(ctg, mkDTM)
# define function ----
mkDTM <- function(chunk)
{
las <- readLAS(chunk)
if(is.empty(las)) return(NULL)
lst <- strsplit(chunk@save, "/")
fdtm <- paste0(gsub(lst[[1]][2], "CTG_DTM", chunk@save), ".tif")
# dtm
dtm <- grid_terrain(las, res=0.25, algorithm=kriging(k=10L), keep_lowest=TRUE) # 5- pts as an average of pts available in 9 grid of 1 m x 1m grid
crs(dtm) <- CRS("+init=epsg:32748")
writeRaster(dtm, filename=fdtm, overwrite=TRUE)
# lasnormalize
las <- lasnormalize(las, dtm)
# return las from above
return(las)
}
newctg = catalog_apply(ctg, mkDTM)
boxplot.stats(z)$out
# test with unremoved point clouds from (lidar) sensor platform
l <- readLAS("D:/FORESTS2020/DATA/LIDAR GIZ/LAS/Point Cloud GIZ Buffer 10m/line_8/LINE_8_1.las")
z <- l@data$Z
z[z %in% boxplot.stats(z)$out] # this is how to show
# test with unremoved point clouds from (lidar) sensor platform
l <- readLAS("D:/FORESTS2020/DATA/LIDAR GIZ/LAS/Point Cloud GIZ Buffer 10m/line_8/LINE_8_1.las")
# test with unremoved point clouds from (lidar) sensor platform
l <- readLAS("EXAMPLE_DATA/LINE_8_1.laz")
z <- l@data$Z
z[z %in% boxplot.stats(z)$out] # this is how to show
boxplot.stats(z)$out
z[boxplot.stats(z)$out] # this is how to show
boxplot.stats(z)$out
z[boxplot.stats(z)$out] # this is how to show
boxplot.stats(z)$out
z[z %in% boxplot.stats(z)$out] # this is how to show
boxplot.stats(z)$out
boxplot.stats(z)$out
z[z %in% boxplot.stats(z)$out] # this is how to show
z_out <- boxplot.stats(z)$out
length(z_out)
z_out <- boxplot.stats(z, coef=5.0)$out
length(z_out)
z_ins <- z[!z_out]
z_ins
z_ins <- z[-z_out]
z_ins
class(z_out)
length(z_ins)
# test with unremoved point clouds from (lidar) sensor platform
l <- readLAS("PROCESSED_DATA/CTG_SINGLE/LINE_8_1.las")
z <- l@data$Z
l
# test with unremoved point clouds from (lidar) sensor platform
l <- readLAS("PROCESSED_DATA/LAS_FOR_TEST/LINE_8_1.las")
l
lidR
# test with unremoved point clouds from (lidar) sensor platform
cat <- catalog("PROCESSED_DATA/CTG_SINGLE/")
ll <- readLAS(cat)
# test with unremoved point clouds from (lidar) sensor platform
l <- readLAS("PROCESSED_DATA/LAS_FOR_TEST/LINE_8_1.las")
# test with unremoved point clouds from (lidar) sensor platform
l <- readLAS("PROCESSED_DATA/LAS_FOR_TEST/LINE_8_1.las")
l
a <- c(1,2,3,4,5,6,7,8,9,10)
b <- c(3,4,5)
a[b]
a[-b]
z_ftr <- lasfilter(l, Z %in% z_out)
nrow(z_ftr@data)
z_ftr <- lasfilter(l, !(Z %in% z_out))
nrow(z_ftr@data)
# same thing
z_ftr <- lasfilter(l, Z %in% z_ins)
nrow(z_ftr@data)
z <- l@data$Z
z_out <- boxplot.stats(z, coef=5.0)$out # for very very extreme values, set coef.> 5
length(z_out)
z_ins <- z[-z_out] # this is how to difference a set (the condition inside box bracket is a vector!)
length(z_ins)
length(z)
# same thing
z_ftr <- lasfilter(l, Z %in% z_ins)
nrow(z_ftr@data)
z_ftr <- lasfilter(l, !(Z %in% z_out))
nrow(z_ftr@data)
# same thing
z_ftr <- lasfilter(l, Z %in% z_ins)
nrow(z_ftr@data)
z_ins <- z[-z_out] # this is how to difference a set (the condition inside box bracket is a vector!)
length(z_ins)
nrow(z_ftr@data)
length(z)
nrow(l@data)
length(z_out)
z_ins <- z[-z_out] # this is how to difference a set (the condition inside box bracket is a vector!)
z_ftr <- lasfilter(l, !(Z %in% z_out))
nrow(z_ftr@data)
# same thing
z_ftr2 <- lasfilter(l, Z %in% z_ins)
nrow(z_ftr2@data)
1340639-1340639
1340639-1340497
plot(l)
plot(z_ftr)
a[b]
a[-b]
a <- c(1,2,3,1,2,3,4,5,6,7,8,9,10)
b <- c(3,4,5)
a[b]
a[-b]
a[b]
a[-b]
b <- c(3,5,7)
a[b]
a[-b]
a[a %in% b]
which(z_out)
z[which(z_out)]
z[which(boxplot.stats(z, coef=5.0)$out)]
which(z[z_out])
z[which(z_out)]
z[which(z %in% z_out)]
which(z %in% z_out)
?LAS
which(z %in% z_out)
las_out <- lasfilter(l, (Z %in% z_out))
las_ftr <- lasfilter(l, !(Z %in% z_out))
plot(las_out)
plot(las_out)
plot(las_ftr)
rm(z_our)
rm(z_ftr)
ls()
rm(z_out)
rm(z_ins)
rm(z_ftr2)
dtm <- grid_terrain(las_ftr, res = 0.25, algorithm = knnidw(k=10L, p=2))
las_nrm <- lasnormalize(las_ftr, dtm)
summary(las_nrm@data$Z)
nrow(dplyr::filter(las_nrm@data, Z < 0))
nrow(dplyr::filter(las_nrm@data, Z >= 0))
writeLAS(lnorm, "PROCESSED_DATA/LAS_OUT/LINE_8_1_nrm.laz")
writeLAS(las_nrm, "PROCESSED_DATA/LAS_OUT/LINE_8_1_nrm.laz")
las_nrm
lascheck(las_nrm)
writeLAS(las_nrm, "PROCESSED_DATA/LAS_OUT/LINE_8_1_nrm.laz")
writeLAS(las_nrm, "PROCESSED_DATA/TEST_LAS_OUT/LINE_8_1_nrm.laz")
# test using las with no suspected point clouds from platform body
ll <- readLAS("PROCESSED_DATA/TES_LAS_INS/LINE_2_70.las")
plot(ll)
boxplot(ll@data$Z)
boxplot.stats(ll@data$Z, coef=5.0)$out
llout <- boxplot.stats(ll@data$Z, coef=5.0)$out
llout
length(llout)
boxplot(ll@data$Z, coef=5.0)
boxplot(ll@data$Z, range=5.0)
hist(ll@data$Z)
install.packages("outliers")
install.packages("Rlof")
ls()
# using Rlof package
Rlof::lof(z, 10)
# using Rlof package
Rlof::lof(z, 10, core=4)
# using Rlof package
?Rlof::lof()
# using Rlof package
Rlof::lof(z, 10, cores=4)
install.packages("fpmoutliers")
ls()
?fpmoutliers::FPI
fpmoutliers::FPI(z)
# using fpoutliers
library(fpmoutliers)
df <- read.csv(system.file("extdata", "fp-outlier-customer-data.csv", package = "fpmoutliers"))
head(df)
rlas:::lasfilterusage()
gc()
?readAS
?readLAS
xyz <- readLAS("PROCESSED_DATA/TEST_LAS_INS/LINE_8_1.las",
select = "xyz")
xyz <- readLAS("PROCESSED_DATA/TEST_CTG_INS/LINE_8_1.las",
select = "xyz")
head(xyz@data)
fpmoutliers::FPI(xyz@data)
ls()
fpi_xyz <- fpmoutliers::FPI(xyz@data)
class(fpi_xyz)
fpi_xyz[[1]]
fpi_xyz
fpi_xyz$scores
unique(fpi_xyz$scores)
unique(fpi_xyz$partials)
unique(fpi_xyz$partials[[2]])
(fpi_xyz$partials)
unique(fpi_xyz$partials$penalization)
# test using the subset of Line_8_1
sublas <- readLAS("PROCESSED_DATA/TEST_LAS_INP/LN81SUB.las")
lascheck(sublas)
# test using the subset of Line_8_1
sublas <- readLAS("PROCESSED_DATA/TEST_LAS_INP/LN81SUB.las")
lascheck(sublas)
sublas <- lasfilterduplicates(sublas)
lascheck(sublas)
sublas
writeLAS("PROCESSED_DATA/TEST_LAS_INP/LN81SUB.laz")
writeLAS(sublas, "PROCESSED_DATA/TEST_LAS_INP/LN81SUB.laz")
sublas <- readLAS("PROCESSED_DATA/TEST_LAS_INP/LN81SUB.laz")
lascheck(sublas)
?duplicated
duplicated(sublas@data, key=c("X", "Y"))
sublas2 <- lasfilter(sublas, duplicated(sublas@data, key=c("X", "Y")))
nrow(sublas@data)
nrow(sublas2@data)
sublas[duplicated(sublas@data, key=c("X", "Y"))]
sublas@data[duplicated(sublas@data, key=c("X", "Y"))]
sum(duplicated(sublas@data, key=c("X", "Y")))
optins(digits=22)
options(digits=22)
sum(duplicated(sublas@data, key=c("X", "Y")))
lascheck(sublas)
sum(duplicated(sublas@data, by=c("X", "Y")))
lasfilter(sublas, duplicated(sublas@data, by=c("X", "Y")))
lasfilter(sublas, !duplicated(sublas@data, by=c("X", "Y")))
sublas
unique(sublas@data$Classification)
sublas_lasco <- lidRplugins::lascoplanar(sublas)
unique(sublas_lasco@data$Classification)
plot(sublas)
plot(sublas_lasco)
?lidRplugins::lascoplanar
lidR::knnidw(k=10, p=1)
?lidR:::C_knn()
RCSF
library(RCSF)
sublas_ground <- lasground(sublas, csf())
plot(sublas_ground, color="Classification")
unnique(sublas_ground@data$Classification)
unique(sublas_ground@data$Classification)
plot(lasfilter(sublas_ground, Classification == 1))
plot(lasfilter(sublas_ground, Classification == 1))
plot(lasfilter(sublas_ground, Classification == 3))
plot(lasfilter(sublas_ground, Classification == 4))
kmeans(z, 2)
?kmeans
z_kmean <- kmeans(z, 2)
plot(z_kmean, col=z_kmean$centers)
plot(z_kmean, col=z_kmean$cluster)
plot(z, col=z_kmean$cluster)
ls()
plot(z, col=z_kmean$center)
z_kmean <- kmeans(z, 3)
plot(z, col=z_kmean$cluster)
z_kmean <- kmeans(z, 5)
plot(z, col=z_kmean$cluster)
str(z_kmean)
unique(z_kmean$centers)
(z_kmean$centers)
(z_kmean$centers)[,2]
(z_kmean$centers)[1]
class(z_kmean$centers)
str(z_kmean$centers)
unique(z_kmean$cluster)
points(z_kmeans$centers, col = 1:2, pch = 8, cex = 2)
points(z_kmean$centers, col = 1:2, pch = 8, cex = 2)
points(z_kmean$centers, col = 1:5, pch = 8, cex = 2)
points(z_kmean$centers, col = c("black", "red", "green", "cyan", "blue"), pch = 8, cex = 2)
points(z_kmean$centers, col = c("blue", "red", "green", "cyan", "black"), pch = 8, cex = 2)
points(z_kmean$centers, col = c("blue", "cyan", "green", "red", "black"), pch = 8, cex = 2)
?hclust
install.packages("fpc")
library(fpc)
?pamk
rm(list=ls())
# the data ----
# there are two data, with and without very extreme z values outliers
w_out <- readLAS("PROCESSED_DATA/TEST_LAS_INP/LN81SUB.laz")
plot(w_out)
n_out <- readLAS("PROCESSED_DATA/TEST_LAS_INP/LN81SUB2.laz")
plot(n_out)
# using simple treshold ----
las_out <- lasfilter(w_out, Z > min(Z) + 100)
# using simple treshold ----
las_out <- lasfilter(w_out, Z > (min(Z) + 100))
plot(las_out)
las_ftr <- lasfilter(w_out, Z <= (min(Z) + 100))
plot(las_ftr)
plot(w_out) # with outliers
plot(las_ftr)
# second dataset
las_ftr2 <- lasfilter(n_out, Z <= (min(Z) + 100))
nrow(las_ftr2@data)
# second dataset
las_ftr2 <- lasfilter(n_out, Z > (min(Z) + 100))
nrow(las_ftr2@data)
# second dataset
las_out <- lasfilter(n_out, Z > (min(Z) + 100))
nrow(las_ftr2@data)
plot(n_out) # no outliers
plot(n_out) # no outliers
# second dataset
las_out <- lasfilter(n_out, Z > (min(Z) + 100))
nrow(las_ftr2@data)
# using kmeans
z <- kmeans(w_out@data$Z, 5)
unique(z$cluster)
w_out@data$clust <- z$cluster
las_out3 <- lasfilter(w_out, clust == 4)
las_out3 <- lasfilter(w_out, clust == 5)
plot(w_out@data$clust, col = c("black", "red", "blue", "green", "orange"))
plot(w_out, col = c("black", "red", "blue", "green", "orange"))
plot(w_out, color = c("black", "red", "blue", "green", "orange"))
unique(w_out@data$clust)
plot(w_out, color = "clust")
library(magrittr)
w_out@data %>% filter(Z > (min(Z) + 100)) %>% head()
w_out@data %>% filter(.,Z > (min(Z) + 100)) %>% head()
library(dplyr)
w_out@data %>% filter(Z > (min(Z) + 100)) %>% head()
w_out@data %>% filter(Z > (min(Z) + 100)) %>% unique()
w_out@data %>% filter(Z > (min(Z) + 100)) %>% unique
w_out@data %>% filter(Z > (min(Z) + 100)) %>% unique(Z)
w_out@data %>% filter(Z > (min(Z) + 100)) %>% unique(.$Z)
w_out@data %>% filter(Z > (min(Z) + 100)) %>% unique(clust
w_out@data %>% filter(Z > (min(Z) + 100)) %>% unique(clust)
w_out@data %>% filter(Z > (min(Z) + 100)) %>% unique(.$clust)
w_out@data %>% filter(Z > (min(Z) + 100)) %$% unique(clust)
las_out3 <- lasfilter(w_out, clust == 2)
plot(las_out3)
plot(las_out3)
str(zApply)
str(z)
max(z$cluster)
which(max(z$cluster))
which(z == max(z$cluster))
which(z = max(z$cluster))
which(z == max(z$cluster))
which(z$cluster == max(z$cluster))
str(z)
which(z$centers == max(z$centers))
las_out3 <- lasfilter(w_out, clust == which(z$centers == max(z$centers)))
plot(las_out3)
