aaa%in%b
# vegetation index subset
idx <- sel_metrics2 %>%
select(FRCI, NBR, NDVI, NDWI, SATVI, NDSI, LClidar2) %>%
st_drop_geometry %>%
melt(id.vars = c("FRCI", "LClidar2"))
idxhutan <- idx %>%
filter(LClidar2 %in%
c("Hutan Tanaman", "Hutan Mangrove Primer", "Hutan Rawa"))
g3 <- idxhutan %>% ggplot(aes(x = value, y = FRCI, color = LClidar2)) +
geom_point(alpha=0.2) + facet_wrap(~variable, labeller = as_labeller(layer_names))
g3
txture <- sel_metrics2 %>%
select(FRCI, Tb4M, Tb5M, Tb6M, Tb7M, LClidar2) %>%
st_drop_geometry %>%
melt(id.vars = c("FRCI", "LClidar2"))
txthutan <- txture %>%
filter(LClidar2 %in%
c("Hutan Tanaman", "Hutan Mangrove Primer", "Hutan Rawa"))
txture <- sel_metrics2 %>%
select(FRCI, Tb4M, Tb5M, Tb6M, Tb7M, LClidar2) %>%
st_drop_geometry %>%
melt(id.vars = c("FRCI", "LClidar2"))
txthutan <- txture %>%
filter(LClidar2 %in%
c("Hutan Tanaman", "Hutan Mangrove Primer", "Hutan Rawa"))
g4 <- txthutan %>% ggplot(aes(x = value, y = FRCI, color = LClidar2)) +
geom_point(alpha=0.2) + facet_wrap(~variable, labeller = as_labeller(layer_names))
g4
txture <- sel_metrics2 %>%
select(FRCI, LClidar2,
Tb4M, Tb5M, Tb6M, Tb7M,
Tb4V, Tb5V, Tb6V, Tb7V) %>%
st_drop_geometry %>%
melt(id.vars = c("FRCI", "LClidar2"))
txthutan <- txture %>%
filter(LClidar2 %in%
c("Hutan Tanaman", "Hutan Mangrove Primer", "Hutan Rawa"))
g4 <- txthutan %>% ggplot(aes(x = value, y = FRCI, color = LClidar2)) +
geom_point(alpha=0.2) + facet_wrap(~variable, labeller = as_labeller(layer_names))
g4
# texture variance subset
txture <- sel_metrics2 %>%
select(FRCI, LClidar2,
Tb4V, Tb5V, Tb6V, Tb7V) %>%
st_drop_geometry %>%
melt(id.vars = c("FRCI", "LClidar2"))
txthutan <- txture %>%
filter(LClidar2 %in%
c("Hutan Tanaman", "Hutan Mangrove Primer", "Hutan Rawa"))
g5 <- txthutan %>% ggplot(aes(x = value, y = FRCI, color = LClidar2)) +
geom_point(alpha=0.2) + facet_wrap(~variable, labeller = as_labeller(layer_names))
g5
intensity <- sel_metrics2 %>%
select(FRCI, LClidar2, ITY) %>%
st_drop_geometry %>%
melt(id.vars = c("FRCI", "LClidar2"))
intensity <- sel_metrics2 %>%
select(b4, ITY) %>%
st_drop_geometry %>%
melt(id.vars = c("FRCI", "LClidar2"))
intensity <- sel_metrics2 %>% select(b4, ITY) %>% st_drop_geometry
intensity <- sel_metrics2 %>% select(b4, ITY, LClidar2) %>% st_drop_geometry
g6 <- intensity %>% ggplot(aes(x = b4, y = ITY, color = LClidar2)) +
geom_point(alpha=0.2) + facet_wrap(~variable, labeller = as_labeller(layer_names))
g6
g6 <- intensity %>% ggplot(aes(x = b4, y = ITY, color = LClidar2)) +
geom_point(alpha=0.2)
g6
g6 <- intensity %>% ggplot(aes(x = b4, y = ITY)) +
geom_point(alpha=0.2)
g6
devtools::install_github("rstudio/kera")
devtools::install_github("rstudio/keras")
ls()
devtools::install_github("rstudio/keras")
install.packages("glue")
devtools::install_github("rstudio/keras")
install.pa
install.packages("processx")
install.packages("processx")
devtools::install_github("rstudio/keras")
install.packages("Rcpp")
install.packages("Rcpp")
devtools::install_github("rstudio/keras")
install.packages("rlang")
install.packages("rlang")
devtools::install_github("rstudio/keras")
library(e1071)
sel_metrics2 <- read_sf("PROCESSED_DATA/FINAL_SEL_METRICS/sel_metrics2.shp")
library(sf)
sel_metrics2 <- read_sf("PROCESSED_DATA/FINAL_SEL_METRICS/sel_metrics2.shp")
names(sel_metrics2)
table(sel_metrics2$LClidar2)
library(dplyr)
library(magrittr)
library(reshape2)
library(ggplot2)
library(keras)
boston_housing <- dataset_boston_housing()
devtools::install_github("rstudio/tensorflow")
library(tensorflow)
install_tensorflow()
library(keras)
boston_housing <- dataset_boston_housing()
boston_housing
class(boston_housing)
c(train_data, train_labels) %<-% boston_housing$train
c(test_data, test_labels) %<-% boston_housing$test
paste0("Training entries: ", length(train_data), ", labels: ", length(train_labels))
train_data[1, ] # Display sample features, notice the different scales
nrow(sel_metrics2
)
table(sel_metrics2$LClidar2)
sel_metrics2 %>% filter(LClidar2 == 'Tanah Terbuka')
sel_metrics2 %>% filter(LClidar2 == 'Tanah Terbuka') %$% unique(tileID)
sel_metrics2 %>% filter(LClidar2 == 'Tanah Terbuka') %$% hist(FRCI)
library(tibble)
names(train_data)
train_data[1, ]
train_daya
train_data
library(tibble)
column_names <- c('CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE',
'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT')
train_df <- as_tibble(train_data)
library(tibble)
column_names <- c('CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE',
'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT')
train_df <- as_tibble(train_data)
colnames(train_df) <- column_names
train_df
train_labels[1:10] # Display first 10 entries
?%<-%
?%>%
library(magrittr)
library(magrittr)
?%>%
help("%>%")
help("%<-%")
boston_housing$train
train_labels
head(train_labels)
head(train_data)
# Normalize training data
train_data <- scale(train_data)
nrow(train_data)
# Use means and standard deviations from training set to normalize test set
col_means_train <- attr(train_data, "scaled:center")
col_stddevs_train <- attr(train_data, "scaled:scale")
test_data <- scale(test_data, center = col_means_train, scale = col_stddevs_train)
train_data[1, ] # First training sample, normalized
dim(train_data)[2]
dim(train_data)
?layer_dense
install_keras()
library(keras)
library(magrittr)
library(dplyr)
library(sf)
library(ggplot2)
library(raster)
rasterOptions(maxmemory = 1.2e+10)
rasterOptions(chunksize = 1e+9)
rm(list=ls())
bl <- c(386400, 9717520) # bottom left of the extrapolated areas
tr <- c(505080, 9795580) # top right
# :: define extrapolation boundaries ----
mask_extrapolation <- as(raster::extent(bl[1], tr[1], bl[2], tr[2]), "SpatialPolygons")
band2 <- raster("PROCESSED_DATA/SEL_RASTER/b2.tif") # later used to replace with predicted values
proj4string(mask_extrapolation) <- proj4string(band2)
plot(mask_extrapolation)
rm(band2)
sel_raster_path = "PROCESSED_DATA/SEL_RASTER"
sel_raster <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = TRUE)
sel_raster0 <- list.files(sel_raster_path, pattern = glob2rx("*.tif"), full.names = FALSE)
sel_raster0 <- gsub(".tif", "", sel_raster0)
class(sel_raster)
list_raster <- lapply(sel_raster, FUN = function(x) raster(x))
names(list_raster) <- sel_raster0
mask_raster <- lapply(list_raster, function(x) crop(x, mask_extrapolation))
list_matrix <- lapply(mask_raster, function(x) as.matrix(x))
list_vector <- lapply(mask_raster, function(x) x[])
# remove band QA and select certain layers for certain purpose
list_vector <- list_vector[-7]
vect_bands  <- list_vector[c("b2", "b3", "b4", "b5", "b6", "b7")]
colwise_bands <- do.call(cbind, vect_bands)
scaled_bands <- scale(colwise_bands)
# preparing training and testing dataset ----
sel_metrics3 <- read_sf("PROCESSED_DATA/FINAL_SEL_METRICS/sel_metrics3.shp")
names(sel_metrics3)
table(sel_metrics3$LClidar2)
ccextract <- st_drop_geometry(sel_metrics3)
ccextract$catFRCI <- findInterval(ccextract$FRCI,
seq(0, 1, by=0.1),
rightmost.closed = TRUE)
class(ccextract$catFRCI)
table(ccextract$catFRCI)
ccextract %>% dplyr::select(LClidar2, FRCI, catFRCI) %>% head(30)
# :: train dataset ----
set.seed(1000)
train.data <- ccextract %>% group_by(catFRCI) %>% sample_n(300) %>% ungroup
tests.data <- setdiff(ccextract, train.data)
table(train.data$LClidar2)
class(train.data)
table(tests.data$catFRCI)
set.seed(1000)
tests.data <- tests.data %>% group_by(catFRCI) %>% sample_n(35) %>% ungroup
Bands <- train.data %>%
dplyr::select(b2, b3, b4, b5, b6, b7) %>%
as.matrix
FRCI <- train.data %>%
dplyr::select(FRCI) %>%
as.matrix
# :: test dataset ----
eBands <-  tests.data %>%
dplyr::select(b2, b3, b4, b5, b6, b7) %>%
as.matrix
eFRCI <- tests.data %>%
dplyr::select(FRCI) %>%
as.matrix
# model development ----
build_model <- function(traindata, actfunc, strmetrics) {
model <- keras_model_sequential() %>%
layer_dense(units = 16, activation = actfunc,
input_shape = dim(traindata)[2]) %>%
layer_dense(units = 16, activation = actfunc) %>%
layer_dense(units = 1)
model %>% compile(
loss = "mse",
optimizer = optimizer_rmsprop(),
metrics = list(strmetrics)
)
model
}
model_bands <- build_model(Bands, "relu", "mean_squared_error")
model_bands %>% summary()
print_dot_callback <- callback_lambda(
on_epoch_end = function(epoch, logs) {
if (epoch %% 90 == 0) cat("\n")
cat(".")
}
)
gc()
ls()
epochs <- 500
# execution ----
history_bands <- model_bands %>% fit(
Bands,
FRCI,
epochs = epochs,
validation_split = 0.2,
verbose = 0,
callbacks = list(print_dot_callback)
)
plot(history_bands, metrics = "mean_squared_error", smooth = FALSE) +
coord_cartesian(ylim = c(0, 5))
pred_FRCI <- model_bands %>% predict(eBands)
(rms.bands <- (pred_FRCI - eFRCI)^2 %>%
sum %>% divide_by(nrow(eFRCI)) %>%
sqrt)
summary(lm(pred_FRCI ~ eFRCI))
plot(pred_FRCI ~ eFRCI)
abline(0,1)
# save model ----
model_bands %>% save_model_hdf5("PROCESSED_DATA/SEL_MODELS/model_bands.h5")
# extrapolate  ----
extrapolate_FRCI <- model_bands %>% predict(colwise_bands)
extrapolation_raster <- mask_raster[[1]]
extrapolation_raster[] <- extrapolate_FRCI
# confusion matrix with categorize FRCI ----
tbl_compare <- tests.data %>% dplyr::select(FRCI, catFRCI)
names(tbl_compare)[1] <- c("Actual")
tbl_compare$`Actual Class` <- findInterval(tbl_compare$Actual,
seq(0, 1, by=0.2), rightmost.closed = TRUE)
tbl_compare <- bind_cols(tbl_compare, as.data.frame(pred_FRCI))
names(tbl_compare)[4] <- "Prediction"
tbl_compare$`Predicted Class` <- findInterval(tbl_compare$Prediction,
seq(0, 1, by=0.2), rightmost.closed = TRUE)
tbl_compare %<>%
mutate(`Predicted Class` = if_else(Prediction < 0, -Inf, as.double(`Predicted Class`)),
`Predicted Class` = if_else(Prediction > 10, Inf, as.double(`Predicted Class`)))
conf_matrix <- table(tbl_compare$`Actual Class`, tbl_compare$`Predicted Class`)
idx <- c(1:5)
conf_matrix <- cbind(conf_matrix, N = apply(conf_matrix, 1, sum),
Confirmed = sapply(idx, function(x) conf_matrix[x, x + 1]))
conf_matrix <- cbind(conf_matrix, Ratio = round(conf_matrix[,8]/conf_matrix[,7], 2))
conf_matrix <- data.frame(conf_matrix)
names(conf_matrix)[1:6] <- c("<0", paste0("#", 1:6))
hist(conf_matrix$Ratio)
barplot(conf_matrix$Ratio,
names.arg = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]"),
main = "FRCI Classes Accuracy Prediction",
xlab = paste("FRCI Range", "(0 \u2264 x \u2264 1)"), ylab = "Accuracy ratio")
# RMSE per category (by=0.2)
head(tbl_compare)
tbl_compare$catFRCI2 <- findInterval(tbl_compare$Actual,
seq(0, 1, by=0.2), rightmost.closed = TRUE)
tbl_rmse <- tbl_compare %>% group_by(catFRCI2) %>% summarise(RMSE = (Actual - Prediction)^2 %>%
sum %>% divide_by(n()) %>%
sqrt)
tbl_rmse
gRMSE <- tbl_rmse %>% ggplot(aes(x = catFRCI2, y = RMSE, fill = as.factor(catFRCI2)))
gRMSE <- gRMSE + geom_bar(stat = "identity")
gRMSE + scale_fill_manual(values=c("#FF2323", "#FDAE61", "#BFFFC0", "#56DD42", "#106128"))
gRMSE <- gRMSE + scale_fill_manual(values=c("#FF2323", "#FDAE61", "#BFFFC0", "#56DD42", "#106128"))
gRMSE + labs(xlab = paste("FRCI Range", "(0 \u2264 x \u2264 1)"))
gRMSE + labs(xlab = "FRCI Range", "(0 \u2264 x \u2264 1)")
?labs
gRMSE + labs(x = "FRCI Range", "(0 \u2264 x \u2264 1)")
gRMSE + labs(x = paste("FRCI Range", "(0 \u2264 x \u2264 1)"))
gRMSE <- tbl_rmse %>% ggplot(aes(x = catFRCI2, y = RMSE, fill = as.factor(catFRCI2)))
gRMSE <- gRMSE + geom_bar(stat = "identity")
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128"),
name = "FRCI",
labels = c("[0-0.2)", "[0.2-0.4)",
"[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("FRCI Range", "(0 \u2264 x \u2264 1)"))
?ggsave
ggsave("PROCESSED_DATA/RASTER_EVAL/barplot-rmse.png", width = 15, height = 8.33333, units = "cm")
ggsave("PROCESSED_DATA/RASTER_EVAL/barplot-rmse.tif",
width = 15, height = 8.33333, units = "cm")
ggsave("PROCESSED_DATA/RASTER_EVAL/barplot-rmse.tiff",
width = 15, height = 8.33333, units = "cm")
ls()
ls()
gc()
gRMSE <- tbl_rmse %>% ggplot(aes(x = catFRCI2, y = RMSE, fill = as.factor(catFRCI2)))
gRMSE <- gRMSE + geom_bar(stat = "identity")
gRMSE
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128"),
name = "FRCI",
labels = c("[0-0.2)", "[0.2-0.4)",
"[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("FRCI Range", "(0 \u2264 x \u2264 1)")) + guide(fill = "none")
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128"),
name = "FRCI",
labels = c("[0-0.2)", "[0.2-0.4)",
"[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("FRCI Range", "(0 \u2264 x \u2264 1)")) + guides(fill = "none")
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128"),
#name = "FRCI",
labels = c("[0-0.2)", "[0.2-0.4)",
"[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("FRCI Range", "(0 \u2264 x \u2264 1)")) + guides(fill = "none")
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128"),
#name = "FRCI",
breaks = c(1, 2, 3, 4, 5),
labels = c("[0-0.2)", "[0.2-0.4)",
"[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("FRCI Range", "(0 \u2264 x \u2264 1)")) + guides(fill = "none")
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128"),
#name = "FRCI",
breaks = c("1", "2", "3", "4", "5"),
labels = c("[0-0.2)", "[0.2-0.4)",
"[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("FRCI Range", "(0 \u2264 x \u2264 1)")) + guides(fill = "none")
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128"),
#name = "FRCI",
breaks = as.factor(c(1, 2, 3, 4, 5)),
labels = c("[0-0.2)", "[0.2-0.4)",
"[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("FRCI Range", "(0 \u2264 x \u2264 1)")) + guides(fill = "none")
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128"),
#name = "FRCI",
fill = "none"
#breaks = as.factor(c(1, 2, 3, 4, 5)),
labels = c("[0-0.2)", "[0.2-0.4)",
"[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("FRCI Range", "(0 \u2264 x \u2264 1)"))
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128"),
#name = "FRCI",
fill = "none",
#breaks = as.factor(c(1, 2, 3, 4, 5)),
labels = c("[0-0.2)", "[0.2-0.4)",
"[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("FRCI Range", "(0 \u2264 x \u2264 1)"))
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128"))
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128"),
#name = "FRCI",
fill = "none")
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128")) +
#name = "FRCI",
guides(fill = "none")
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128")) +
#name = "FRCI",
guides(fill = "none") +
#breaks = as.factor(c(1, 2, 3, 4, 5)),
# labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
scale_x_discrete(labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]"))
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128")) +
#name = "FRCI",
guides(fill = "none") +
#breaks = as.factor(c(1, 2, 3, 4, 5)),
# labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
scale_x_discrete(breaks = as.factor(c(1, 2, 3, 4, 5)),
labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]"))
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128")) +
#name = "FRCI",
guides(fill = "none") +
#breaks = as.factor(c(1, 2, 3, 4, 5)),
# labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
scale_x_discrete(breaks = c(1, 2, 3, 4, 5),
labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]"))
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128")) +
#name = "FRCI",
guides(fill = "none") +
#breaks = as.factor(c(1, 2, 3, 4, 5)),
# labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
scale_x_discrete(breaks = c("1", "2", "3", "4", "5"),
labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]"))
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128")) +
#name = "FRCI",
guides(fill = "none") +
#breaks = as.factor(c(1, 2, 3, 4, 5)),
# labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
scale_x_continuous(breaks = c("1", "2", "3", "4", "5"),
labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]"))
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128")) +
#name = "FRCI",
guides(fill = "none") +
#breaks = as.factor(c(1, 2, 3, 4, 5)),
# labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
scale_x_continuous(breaks = c(1:5),
labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]"))
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128")) +
#name = "FRCI",
guides(fill = "none") +
#breaks = as.factor(c(1, 2, 3, 4, 5)),
# labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
scale_x_continuous(breaks = c(1:5),
labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("FRCI Range", "(0 \u2264 x \u2264 1)"))
labs()
?labs
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128")) +
#name = "FRCI",
guides(fill = "none") +
#breaks = as.factor(c(1, 2, 3, 4, 5)),
# labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
scale_x_continuous(breaks = c(1:5),
labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("\nFRCI Range", "(0 \u2264 x \u2264 1)"))
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128")) +
#name = "FRCI",
guides(fill = "none") +
#breaks = as.factor(c(1, 2, 3, 4, 5)),
# labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
scale_x_continuous(breaks = c(1:5),
labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("\nFRCI Range", "(0 \u2264 x \u2264 1)"),
y = paste("\nRMSE"))
gRMSE +
scale_fill_manual(values=c("#FF2323", "#FDAE61",
"#BFFFC0", "#56DD42", "#106128")) +
#name = "FRCI",
guides(fill = "none") +
#breaks = as.factor(c(1, 2, 3, 4, 5)),
# labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
scale_x_continuous(breaks = c(1:5),
labels = c("[0-0.2)", "[0.2-0.4)", "[0.4-0.6)", "[0.6-0.8)", "[0.8-1.0]")) +
labs(x = paste("\nFRCI Range", "(0 \u2264 x \u2264 1)"),
y = paste("RMSE\n"))
ggsave("PROCESSED_DATA/RASTER_EVAL/barplot-rmse-v2.tiff",
width = 15, height = 8.33333, units = "cm")
ls()
head(tests.data)
class(tests.data)
names(tests.data)
sel_metrics3
