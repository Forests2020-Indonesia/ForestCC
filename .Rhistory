600430-600186
600430-600192
600430-600180
9314482-9314323
250/3
30*210
30*1
30*80
9314322-100
9314482-9314222
9314482-9314322
9314482-9314222
9314482-9314232
library(lidR)
library(dplyr)
library(magrittr)
l <- readLAS("/DATA/LiDAR CIDANAU BANTEN/07. POINT CLOUD/AREA_3_ALL_CLASS.las")
lassample <- lasclipRectangle(l, xleft = 600180, ybottom = 9314232,
xright = 600430, ytop = 9314482)
writeLAS(lassample, "EXAMPLE_DATA/lassample.laz")
xx<-readLAS("EXAMPLE_DATA/lassample.laz")
lassample <- lasfilter(lassample, ReturnNumber <= NumberOfReturn)
lassample <- lasfilter(lassample, ReturnNumber <= NumberOfReturns)
writeLAS(lassample, "EXAMPLE_DATA/lassample.laz")
nrow(lassample@data)
nrow(l@data)
lassample <- lasclipRectangle(l, xleft = 600180, ybottom = 9314232,
xright = 600430, ytop = 9314482)
lassample <- nrow(lasfilter(lassample, ReturnNumber <= NumberOfReturns)@data)
ls()
lassample <- lasfilter(lassample, ReturnNumber <= NumberOfReturns)
lassample <- lasclipRectangle(l, xleft = 600180, ybottom = 9314232,
xright = 600430, ytop = 9314482)
lassample <- lasfilter(lassample, ReturnNumber <= NumberOfReturns)
nrow(lassample@data)
writeLAS(lassample, "EXAMPLE_DATA/lassample.laz")
lassample <- lasclipRectangle(l, xleft = 600180, ybottom = 9314232,
xright = 600430, ytop = 9314482)
nrow(lassample@data)
lassample <- lasfilter(lassample, ReturnNumber <= NumberOfReturns)
nrow(lassample@data)
nrow(l@data)
writeLAS(lassample, "EXAMPLE_DATA/lassample.laz")
# load the data ----
l <- readLAS("EXAMPLE_DATA/lassample.laz")
plot(l)
# normalize ----
dtm <- grid_terrain(las, res=0.5, method="kriging")
rm(l)
# load the data ----
las <- readLAS("EXAMPLE_DATA/lassample.laz")
# normalize ----
dtm <- grid_terrain(las, res=0.5, method="kriging")
lasnormalize(las, dtm)
plot(las)
las
lasthin <- lasfilterdecimate(lassample, density=15, res=1)
lasthin
writeLAS(lasthin, "EXAMPLE_DATA/lassample.laz")
# load the data ----
las <- readLAS("EXAMPLE_DATA/lassample.laz")
# normalize ----
dtm <- grid_terrain(las, res=0.5, method="kriging")
plot(las)
# normalize ----
dtm <- grid_terrain(las, res=0.5, method="kriging")
lasnormalize(las, dtm)
# chm ----
chm <- grid_canopy(las, res = 0.5, subcircle = 0.2, na.fill="knnidw", k=10, p=2)
plot(chm)
unique(las@data$Classification)
unique(lasthin@data$Classification)
table(lasthin@data$Classification)
# LiDAR metric ----
# all return
CCIdx <- function(z, cls)
{
# all point clouds (returns) which classified as vegetation
vg <- (cls >= 3) & (cls <= 5) & (z >= 3)
vg <- sum(vg)
# all return despite of their classification;
# use 'length' function because of z is a vector object
ar <- length(z)
return(list(arci = vg/ar)) # the output must be a "list" object, so it uses 'list' function
}
cc <- grid_metrics(las, func=CCidx(Z, Classification), res=30)
# LiDAR metric ----
# all return
CCIdx <- function(z, cls)
{
# all point clouds (returns) which classified as vegetation
vg <- (cls >= 3) & (cls <= 5) & (z >= 3)
vg <- sum(vg)
# all return despite of their classification;
# use 'length' function because of z is a vector object
ar <- length(z)
return(list(arci = vg/ar)) # the output must be a "list" object, so it uses 'list' function
}
cc <- grid_metrics(las, func=CCidx(Z, Classification), res=30)
cc <- grid_metrics(las, func=CCIdx(Z, Classification), res=30)
cc
# turn CC into sf
cc_sf = cc %>% as.data.frame %>% st_as_sf(coords = c("X","Y"), crs=32748)
library(sf)
# turn CC into sf
cc_sf = cc %>% as.data.frame %>% st_as_sf(coords = c("X","Y"), crs=32748)
st_write(cc_sf, "PROCESSED_DATA/cc_sf.shp", delete_layer = TRUE)
# LiDAR metric ----
# all return
CCIdx <- function(z, cls)
{
# all point clouds (returns) which classified as vegetation
vg <- (cls >= 3) & (cls <= 5) & (z >= 2.5)
vg <- sum(vg)
# all return despite of their classification;
# use 'length' function because of z is a vector object
ar <- length(z)
return(list(arci = vg/ar)) # the output must be a "list" object, so it uses 'list' function
}
cc <- grid_metrics(las, func=CCIdx(Z, Classification), res=30)
cc
# turn CC into sf
cc_sf = cc %>% as.data.frame %>% st_as_sf(coords = c("X","Y"), crs=32748)
st_write(cc_sf, "PROCESSED_DATA/cc_sf.shp", delete_layer = TRUE)
